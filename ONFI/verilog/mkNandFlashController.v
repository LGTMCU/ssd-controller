//
// Generated by Bluespec Compiler, version 2012.01.A (build 26572, 2012-01-17)
//
// On Fri May 17 14:17:07 IST 2013
//
// Method conflict info:
// Method: nfcB_interface__address_from_nvm_m
// Conflict-free: nfcB_interface__data_from_nvm_m,
// 	       nfcB_interface_data_to_nvm_,
// 	       nfcB_interface__nand_ce_l_m,
// 	       nfcB_interface__nand_we_l_m,
// 	       nfcB_interface__nand_oe_l_m,
// 	       nfcB_interface__nand_reset_l_m,
// 	       nfcB_interface_interrupt_,
// 	       nfcB_interface_ready_busy_l_,
// 	       onfi_interface__data_from_flash_m,
// 	       onfi_interface_data_to_flash_,
// 	       onfi_interface_onfi_ce_l_,
// 	       onfi_interface_onfi_we_l_,
// 	       onfi_interface_onfi_re_l_,
// 	       onfi_interface_onfi_wp_l_,
// 	       onfi_interface_onfi_cle_,
// 	       onfi_interface_onfi_ale_,
// 	       onfi_interface__interrupt_m,
// 	       onfi_interface__ready_busy_l_m
// Conflicts: nfcB_interface__address_from_nvm_m
//
// Method: nfcB_interface__data_from_nvm_m
// Conflict-free: nfcB_interface__address_from_nvm_m,
// 	       nfcB_interface_data_to_nvm_,
// 	       nfcB_interface__nand_ce_l_m,
// 	       nfcB_interface__nand_we_l_m,
// 	       nfcB_interface__nand_oe_l_m,
// 	       nfcB_interface__nand_reset_l_m,
// 	       nfcB_interface_interrupt_,
// 	       nfcB_interface_ready_busy_l_,
// 	       onfi_interface__data_from_flash_m,
// 	       onfi_interface_data_to_flash_,
// 	       onfi_interface_onfi_ce_l_,
// 	       onfi_interface_onfi_we_l_,
// 	       onfi_interface_onfi_re_l_,
// 	       onfi_interface_onfi_wp_l_,
// 	       onfi_interface_onfi_cle_,
// 	       onfi_interface_onfi_ale_,
// 	       onfi_interface__interrupt_m,
// 	       onfi_interface__ready_busy_l_m
// Conflicts: nfcB_interface__data_from_nvm_m
//
// Method: nfcB_interface_data_to_nvm_
// Conflict-free: nfcB_interface__address_from_nvm_m,
// 	       nfcB_interface__data_from_nvm_m,
// 	       nfcB_interface_data_to_nvm_,
// 	       nfcB_interface__nand_ce_l_m,
// 	       nfcB_interface__nand_we_l_m,
// 	       nfcB_interface__nand_oe_l_m,
// 	       nfcB_interface__nand_reset_l_m,
// 	       nfcB_interface_interrupt_,
// 	       nfcB_interface_ready_busy_l_,
// 	       onfi_interface__data_from_flash_m,
// 	       onfi_interface_data_to_flash_,
// 	       onfi_interface_onfi_ce_l_,
// 	       onfi_interface_onfi_we_l_,
// 	       onfi_interface_onfi_re_l_,
// 	       onfi_interface_onfi_wp_l_,
// 	       onfi_interface_onfi_cle_,
// 	       onfi_interface_onfi_ale_,
// 	       onfi_interface__interrupt_m,
// 	       onfi_interface__ready_busy_l_m
//
// Method: nfcB_interface__nand_ce_l_m
// Conflict-free: nfcB_interface__address_from_nvm_m,
// 	       nfcB_interface__data_from_nvm_m,
// 	       nfcB_interface_data_to_nvm_,
// 	       nfcB_interface__nand_we_l_m,
// 	       nfcB_interface__nand_oe_l_m,
// 	       nfcB_interface__nand_reset_l_m,
// 	       nfcB_interface_interrupt_,
// 	       nfcB_interface_ready_busy_l_,
// 	       onfi_interface__data_from_flash_m,
// 	       onfi_interface_data_to_flash_,
// 	       onfi_interface_onfi_ce_l_,
// 	       onfi_interface_onfi_we_l_,
// 	       onfi_interface_onfi_re_l_,
// 	       onfi_interface_onfi_wp_l_,
// 	       onfi_interface_onfi_cle_,
// 	       onfi_interface_onfi_ale_,
// 	       onfi_interface__interrupt_m,
// 	       onfi_interface__ready_busy_l_m
// Conflicts: nfcB_interface__nand_ce_l_m
//
// Method: nfcB_interface__nand_we_l_m
// Conflict-free: nfcB_interface__address_from_nvm_m,
// 	       nfcB_interface__data_from_nvm_m,
// 	       nfcB_interface_data_to_nvm_,
// 	       nfcB_interface__nand_ce_l_m,
// 	       nfcB_interface__nand_oe_l_m,
// 	       nfcB_interface__nand_reset_l_m,
// 	       nfcB_interface_interrupt_,
// 	       nfcB_interface_ready_busy_l_,
// 	       onfi_interface__data_from_flash_m,
// 	       onfi_interface_data_to_flash_,
// 	       onfi_interface_onfi_ce_l_,
// 	       onfi_interface_onfi_we_l_,
// 	       onfi_interface_onfi_re_l_,
// 	       onfi_interface_onfi_wp_l_,
// 	       onfi_interface_onfi_cle_,
// 	       onfi_interface_onfi_ale_,
// 	       onfi_interface__interrupt_m,
// 	       onfi_interface__ready_busy_l_m
// Conflicts: nfcB_interface__nand_we_l_m
//
// Method: nfcB_interface__nand_oe_l_m
// Conflict-free: nfcB_interface__address_from_nvm_m,
// 	       nfcB_interface__data_from_nvm_m,
// 	       nfcB_interface_data_to_nvm_,
// 	       nfcB_interface__nand_ce_l_m,
// 	       nfcB_interface__nand_we_l_m,
// 	       nfcB_interface__nand_reset_l_m,
// 	       nfcB_interface_interrupt_,
// 	       nfcB_interface_ready_busy_l_,
// 	       onfi_interface__data_from_flash_m,
// 	       onfi_interface_data_to_flash_,
// 	       onfi_interface_onfi_ce_l_,
// 	       onfi_interface_onfi_we_l_,
// 	       onfi_interface_onfi_re_l_,
// 	       onfi_interface_onfi_wp_l_,
// 	       onfi_interface_onfi_cle_,
// 	       onfi_interface_onfi_ale_,
// 	       onfi_interface__interrupt_m,
// 	       onfi_interface__ready_busy_l_m
// Conflicts: nfcB_interface__nand_oe_l_m
//
// Method: nfcB_interface__nand_reset_l_m
// Conflict-free: nfcB_interface__address_from_nvm_m,
// 	       nfcB_interface__data_from_nvm_m,
// 	       nfcB_interface_data_to_nvm_,
// 	       nfcB_interface__nand_ce_l_m,
// 	       nfcB_interface__nand_we_l_m,
// 	       nfcB_interface__nand_oe_l_m,
// 	       nfcB_interface_interrupt_,
// 	       nfcB_interface_ready_busy_l_,
// 	       onfi_interface__data_from_flash_m,
// 	       onfi_interface_data_to_flash_,
// 	       onfi_interface_onfi_ce_l_,
// 	       onfi_interface_onfi_we_l_,
// 	       onfi_interface_onfi_re_l_,
// 	       onfi_interface_onfi_wp_l_,
// 	       onfi_interface_onfi_cle_,
// 	       onfi_interface_onfi_ale_,
// 	       onfi_interface__interrupt_m,
// 	       onfi_interface__ready_busy_l_m
// Conflicts: nfcB_interface__nand_reset_l_m
//
// Method: nfcB_interface_interrupt_
// Conflict-free: nfcB_interface__address_from_nvm_m,
// 	       nfcB_interface__data_from_nvm_m,
// 	       nfcB_interface_data_to_nvm_,
// 	       nfcB_interface__nand_ce_l_m,
// 	       nfcB_interface__nand_we_l_m,
// 	       nfcB_interface__nand_oe_l_m,
// 	       nfcB_interface__nand_reset_l_m,
// 	       nfcB_interface_interrupt_,
// 	       nfcB_interface_ready_busy_l_,
// 	       onfi_interface__data_from_flash_m,
// 	       onfi_interface_data_to_flash_,
// 	       onfi_interface_onfi_ce_l_,
// 	       onfi_interface_onfi_we_l_,
// 	       onfi_interface_onfi_re_l_,
// 	       onfi_interface_onfi_wp_l_,
// 	       onfi_interface_onfi_cle_,
// 	       onfi_interface_onfi_ale_,
// 	       onfi_interface__interrupt_m,
// 	       onfi_interface__ready_busy_l_m
//
// Method: nfcB_interface_ready_busy_l_
// Conflict-free: nfcB_interface__address_from_nvm_m,
// 	       nfcB_interface__data_from_nvm_m,
// 	       nfcB_interface_data_to_nvm_,
// 	       nfcB_interface__nand_ce_l_m,
// 	       nfcB_interface__nand_we_l_m,
// 	       nfcB_interface__nand_oe_l_m,
// 	       nfcB_interface__nand_reset_l_m,
// 	       nfcB_interface_interrupt_,
// 	       nfcB_interface_ready_busy_l_,
// 	       onfi_interface__data_from_flash_m,
// 	       onfi_interface_data_to_flash_,
// 	       onfi_interface_onfi_ce_l_,
// 	       onfi_interface_onfi_we_l_,
// 	       onfi_interface_onfi_re_l_,
// 	       onfi_interface_onfi_wp_l_,
// 	       onfi_interface_onfi_cle_,
// 	       onfi_interface_onfi_ale_,
// 	       onfi_interface__interrupt_m,
// 	       onfi_interface__ready_busy_l_m
//
// Method: onfi_interface__data_from_flash_m
// Conflict-free: nfcB_interface__address_from_nvm_m,
// 	       nfcB_interface__data_from_nvm_m,
// 	       nfcB_interface_data_to_nvm_,
// 	       nfcB_interface__nand_ce_l_m,
// 	       nfcB_interface__nand_we_l_m,
// 	       nfcB_interface__nand_oe_l_m,
// 	       nfcB_interface__nand_reset_l_m,
// 	       nfcB_interface_interrupt_,
// 	       nfcB_interface_ready_busy_l_,
// 	       onfi_interface_data_to_flash_,
// 	       onfi_interface_onfi_ce_l_,
// 	       onfi_interface_onfi_we_l_,
// 	       onfi_interface_onfi_re_l_,
// 	       onfi_interface_onfi_wp_l_,
// 	       onfi_interface_onfi_cle_,
// 	       onfi_interface_onfi_ale_,
// 	       onfi_interface__interrupt_m,
// 	       onfi_interface__ready_busy_l_m
// Conflicts: onfi_interface__data_from_flash_m
//
// Method: onfi_interface_data_to_flash_
// Conflict-free: nfcB_interface__address_from_nvm_m,
// 	       nfcB_interface__data_from_nvm_m,
// 	       nfcB_interface_data_to_nvm_,
// 	       nfcB_interface__nand_ce_l_m,
// 	       nfcB_interface__nand_we_l_m,
// 	       nfcB_interface__nand_oe_l_m,
// 	       nfcB_interface__nand_reset_l_m,
// 	       nfcB_interface_interrupt_,
// 	       nfcB_interface_ready_busy_l_,
// 	       onfi_interface__data_from_flash_m,
// 	       onfi_interface_data_to_flash_,
// 	       onfi_interface_onfi_ce_l_,
// 	       onfi_interface_onfi_we_l_,
// 	       onfi_interface_onfi_re_l_,
// 	       onfi_interface_onfi_wp_l_,
// 	       onfi_interface_onfi_cle_,
// 	       onfi_interface_onfi_ale_,
// 	       onfi_interface__interrupt_m,
// 	       onfi_interface__ready_busy_l_m
//
// Method: onfi_interface_onfi_ce_l_
// Conflict-free: nfcB_interface__address_from_nvm_m,
// 	       nfcB_interface__data_from_nvm_m,
// 	       nfcB_interface_data_to_nvm_,
// 	       nfcB_interface__nand_ce_l_m,
// 	       nfcB_interface__nand_we_l_m,
// 	       nfcB_interface__nand_oe_l_m,
// 	       nfcB_interface__nand_reset_l_m,
// 	       nfcB_interface_interrupt_,
// 	       nfcB_interface_ready_busy_l_,
// 	       onfi_interface__data_from_flash_m,
// 	       onfi_interface_data_to_flash_,
// 	       onfi_interface_onfi_ce_l_,
// 	       onfi_interface_onfi_we_l_,
// 	       onfi_interface_onfi_re_l_,
// 	       onfi_interface_onfi_wp_l_,
// 	       onfi_interface_onfi_cle_,
// 	       onfi_interface_onfi_ale_,
// 	       onfi_interface__interrupt_m,
// 	       onfi_interface__ready_busy_l_m
//
// Method: onfi_interface_onfi_we_l_
// Conflict-free: nfcB_interface__address_from_nvm_m,
// 	       nfcB_interface__data_from_nvm_m,
// 	       nfcB_interface_data_to_nvm_,
// 	       nfcB_interface__nand_ce_l_m,
// 	       nfcB_interface__nand_we_l_m,
// 	       nfcB_interface__nand_oe_l_m,
// 	       nfcB_interface__nand_reset_l_m,
// 	       nfcB_interface_interrupt_,
// 	       nfcB_interface_ready_busy_l_,
// 	       onfi_interface__data_from_flash_m,
// 	       onfi_interface_data_to_flash_,
// 	       onfi_interface_onfi_ce_l_,
// 	       onfi_interface_onfi_we_l_,
// 	       onfi_interface_onfi_re_l_,
// 	       onfi_interface_onfi_wp_l_,
// 	       onfi_interface_onfi_cle_,
// 	       onfi_interface_onfi_ale_,
// 	       onfi_interface__interrupt_m,
// 	       onfi_interface__ready_busy_l_m
//
// Method: onfi_interface_onfi_re_l_
// Conflict-free: nfcB_interface__address_from_nvm_m,
// 	       nfcB_interface__data_from_nvm_m,
// 	       nfcB_interface_data_to_nvm_,
// 	       nfcB_interface__nand_ce_l_m,
// 	       nfcB_interface__nand_we_l_m,
// 	       nfcB_interface__nand_oe_l_m,
// 	       nfcB_interface__nand_reset_l_m,
// 	       nfcB_interface_interrupt_,
// 	       nfcB_interface_ready_busy_l_,
// 	       onfi_interface__data_from_flash_m,
// 	       onfi_interface_data_to_flash_,
// 	       onfi_interface_onfi_ce_l_,
// 	       onfi_interface_onfi_we_l_,
// 	       onfi_interface_onfi_re_l_,
// 	       onfi_interface_onfi_wp_l_,
// 	       onfi_interface_onfi_cle_,
// 	       onfi_interface_onfi_ale_,
// 	       onfi_interface__interrupt_m,
// 	       onfi_interface__ready_busy_l_m
//
// Method: onfi_interface_onfi_wp_l_
// Conflict-free: nfcB_interface__address_from_nvm_m,
// 	       nfcB_interface__data_from_nvm_m,
// 	       nfcB_interface_data_to_nvm_,
// 	       nfcB_interface__nand_ce_l_m,
// 	       nfcB_interface__nand_we_l_m,
// 	       nfcB_interface__nand_oe_l_m,
// 	       nfcB_interface__nand_reset_l_m,
// 	       nfcB_interface_interrupt_,
// 	       nfcB_interface_ready_busy_l_,
// 	       onfi_interface__data_from_flash_m,
// 	       onfi_interface_data_to_flash_,
// 	       onfi_interface_onfi_ce_l_,
// 	       onfi_interface_onfi_we_l_,
// 	       onfi_interface_onfi_re_l_,
// 	       onfi_interface_onfi_wp_l_,
// 	       onfi_interface_onfi_cle_,
// 	       onfi_interface_onfi_ale_,
// 	       onfi_interface__interrupt_m,
// 	       onfi_interface__ready_busy_l_m
//
// Method: onfi_interface_onfi_cle_
// Conflict-free: nfcB_interface__address_from_nvm_m,
// 	       nfcB_interface__data_from_nvm_m,
// 	       nfcB_interface_data_to_nvm_,
// 	       nfcB_interface__nand_ce_l_m,
// 	       nfcB_interface__nand_we_l_m,
// 	       nfcB_interface__nand_oe_l_m,
// 	       nfcB_interface__nand_reset_l_m,
// 	       nfcB_interface_interrupt_,
// 	       nfcB_interface_ready_busy_l_,
// 	       onfi_interface__data_from_flash_m,
// 	       onfi_interface_data_to_flash_,
// 	       onfi_interface_onfi_ce_l_,
// 	       onfi_interface_onfi_we_l_,
// 	       onfi_interface_onfi_re_l_,
// 	       onfi_interface_onfi_wp_l_,
// 	       onfi_interface_onfi_cle_,
// 	       onfi_interface_onfi_ale_,
// 	       onfi_interface__interrupt_m,
// 	       onfi_interface__ready_busy_l_m
//
// Method: onfi_interface_onfi_ale_
// Conflict-free: nfcB_interface__address_from_nvm_m,
// 	       nfcB_interface__data_from_nvm_m,
// 	       nfcB_interface_data_to_nvm_,
// 	       nfcB_interface__nand_ce_l_m,
// 	       nfcB_interface__nand_we_l_m,
// 	       nfcB_interface__nand_oe_l_m,
// 	       nfcB_interface__nand_reset_l_m,
// 	       nfcB_interface_interrupt_,
// 	       nfcB_interface_ready_busy_l_,
// 	       onfi_interface__data_from_flash_m,
// 	       onfi_interface_data_to_flash_,
// 	       onfi_interface_onfi_ce_l_,
// 	       onfi_interface_onfi_we_l_,
// 	       onfi_interface_onfi_re_l_,
// 	       onfi_interface_onfi_wp_l_,
// 	       onfi_interface_onfi_cle_,
// 	       onfi_interface_onfi_ale_,
// 	       onfi_interface__interrupt_m,
// 	       onfi_interface__ready_busy_l_m
//
// Method: onfi_interface__interrupt_m
// Conflict-free: nfcB_interface__address_from_nvm_m,
// 	       nfcB_interface__data_from_nvm_m,
// 	       nfcB_interface_data_to_nvm_,
// 	       nfcB_interface__nand_ce_l_m,
// 	       nfcB_interface__nand_we_l_m,
// 	       nfcB_interface__nand_oe_l_m,
// 	       nfcB_interface__nand_reset_l_m,
// 	       nfcB_interface_interrupt_,
// 	       nfcB_interface_ready_busy_l_,
// 	       onfi_interface__data_from_flash_m,
// 	       onfi_interface_data_to_flash_,
// 	       onfi_interface_onfi_ce_l_,
// 	       onfi_interface_onfi_we_l_,
// 	       onfi_interface_onfi_re_l_,
// 	       onfi_interface_onfi_wp_l_,
// 	       onfi_interface_onfi_cle_,
// 	       onfi_interface_onfi_ale_,
// 	       onfi_interface__ready_busy_l_m
// Conflicts: onfi_interface__interrupt_m
//
// Method: onfi_interface__ready_busy_l_m
// Conflict-free: nfcB_interface__address_from_nvm_m,
// 	       nfcB_interface__data_from_nvm_m,
// 	       nfcB_interface_data_to_nvm_,
// 	       nfcB_interface__nand_ce_l_m,
// 	       nfcB_interface__nand_we_l_m,
// 	       nfcB_interface__nand_oe_l_m,
// 	       nfcB_interface__nand_reset_l_m,
// 	       nfcB_interface_interrupt_,
// 	       nfcB_interface_ready_busy_l_,
// 	       onfi_interface__data_from_flash_m,
// 	       onfi_interface_data_to_flash_,
// 	       onfi_interface_onfi_ce_l_,
// 	       onfi_interface_onfi_we_l_,
// 	       onfi_interface_onfi_re_l_,
// 	       onfi_interface_onfi_wp_l_,
// 	       onfi_interface_onfi_cle_,
// 	       onfi_interface_onfi_ale_,
// 	       onfi_interface__interrupt_m
// Conflicts: onfi_interface__ready_busy_l_m
//
//
// Ports:
// Name                         I/O  size props
// RDY_nfcB_interface__address_from_nvm_m  O     1 const
// RDY_nfcB_interface__data_from_nvm_m  O     1 const
// nfcB_interface_data_to_nvm_    O    32 reg
// RDY_nfcB_interface_data_to_nvm_  O     1 const
// RDY_nfcB_interface__nand_ce_l_m  O     1 const
// RDY_nfcB_interface__nand_we_l_m  O     1 const
// RDY_nfcB_interface__nand_oe_l_m  O     1 const
// RDY_nfcB_interface__nand_reset_l_m  O     1 const
// nfcB_interface_interrupt_      O     1 reg
// RDY_nfcB_interface_interrupt_  O     1 const
// nfcB_interface_ready_busy_l_   O     1 reg
// RDY_nfcB_interface_ready_busy_l_  O     1 const
// RDY_onfi_interface__data_from_flash_m  O     1 const
// onfi_interface_data_to_flash_  O    16 reg
// RDY_onfi_interface_data_to_flash_  O     1 const
// onfi_interface_onfi_ce_l_      O     1 reg
// RDY_onfi_interface_onfi_ce_l_  O     1 const
// onfi_interface_onfi_we_l_      O     1 reg
// RDY_onfi_interface_onfi_we_l_  O     1 const
// onfi_interface_onfi_re_l_      O     1 reg
// RDY_onfi_interface_onfi_re_l_  O     1 const
// onfi_interface_onfi_wp_l_      O     1 reg
// RDY_onfi_interface_onfi_wp_l_  O     1 const
// onfi_interface_onfi_cle_       O     1 reg
// RDY_onfi_interface_onfi_cle_   O     1 const
// onfi_interface_onfi_ale_       O     1 reg
// RDY_onfi_interface_onfi_ale_   O     1 const
// RDY_onfi_interface__interrupt_m  O     1 const
// RDY_onfi_interface__ready_busy_l_m  O     1 const
// CLK                            I     1 clock
// RST_N                          I     1 reset
// nfcB_interface__address_from_nvm_m__address_from_nvm  I    12
// nfcB_interface__data_from_nvm_m__data_from_nvm  I    32
// nfcB_interface__nand_ce_l_m__nand_ce_l  I     1
// nfcB_interface__nand_we_l_m__nand_we_l  I     1
// nfcB_interface__nand_oe_l_m__nand_oe_l  I     1
// nfcB_interface__nand_reset_l_m__nand_reset_l  I     1 unused
// onfi_interface__data_from_flash_m__data_from_flash  I    16
// onfi_interface__interrupt_m__interrupt  I     1 unused
// onfi_interface__ready_busy_l_m__ready_busy_l  I     1
// EN_nfcB_interface__address_from_nvm_m  I     1
// EN_nfcB_interface__data_from_nvm_m  I     1
// EN_nfcB_interface__nand_ce_l_m  I     1
// EN_nfcB_interface__nand_we_l_m  I     1
// EN_nfcB_interface__nand_oe_l_m  I     1
// EN_nfcB_interface__nand_reset_l_m  I     1 unused
// EN_onfi_interface__data_from_flash_m  I     1
// EN_onfi_interface__interrupt_m  I     1 unused
// EN_onfi_interface__ready_busy_l_m  I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
`define BSV_ASSIGNMENT_DELAY
`endif

module mkNandFlashController(CLK,
			     RST_N,

			     nfcB_interface__address_from_nvm_m__address_from_nvm,
			     EN_nfcB_interface__address_from_nvm_m,
			     RDY_nfcB_interface__address_from_nvm_m,

			     nfcB_interface__data_from_nvm_m__data_from_nvm,
			     EN_nfcB_interface__data_from_nvm_m,
			     RDY_nfcB_interface__data_from_nvm_m,

			     nfcB_interface_data_to_nvm_,
			     RDY_nfcB_interface_data_to_nvm_,

			     nfcB_interface__nand_ce_l_m__nand_ce_l,
			     EN_nfcB_interface__nand_ce_l_m,
			     RDY_nfcB_interface__nand_ce_l_m,

			     nfcB_interface__nand_we_l_m__nand_we_l,
			     EN_nfcB_interface__nand_we_l_m,
			     RDY_nfcB_interface__nand_we_l_m,

			     nfcB_interface__nand_oe_l_m__nand_oe_l,
			     EN_nfcB_interface__nand_oe_l_m,
			     RDY_nfcB_interface__nand_oe_l_m,

			     nfcB_interface__nand_reset_l_m__nand_reset_l,
			     EN_nfcB_interface__nand_reset_l_m,
			     RDY_nfcB_interface__nand_reset_l_m,

			     nfcB_interface_interrupt_,
			     RDY_nfcB_interface_interrupt_,

			     nfcB_interface_ready_busy_l_,
			     RDY_nfcB_interface_ready_busy_l_,

			     onfi_interface__data_from_flash_m__data_from_flash,
			     EN_onfi_interface__data_from_flash_m,
			     RDY_onfi_interface__data_from_flash_m,

			     onfi_interface_data_to_flash_,
			     RDY_onfi_interface_data_to_flash_,

			     onfi_interface_onfi_ce_l_,
			     RDY_onfi_interface_onfi_ce_l_,

			     onfi_interface_onfi_we_l_,
			     RDY_onfi_interface_onfi_we_l_,

			     onfi_interface_onfi_re_l_,
			     RDY_onfi_interface_onfi_re_l_,

			     onfi_interface_onfi_wp_l_,
			     RDY_onfi_interface_onfi_wp_l_,

			     onfi_interface_onfi_cle_,
			     RDY_onfi_interface_onfi_cle_,

			     onfi_interface_onfi_ale_,
			     RDY_onfi_interface_onfi_ale_,

			     onfi_interface__interrupt_m__interrupt,
			     EN_onfi_interface__interrupt_m,
			     RDY_onfi_interface__interrupt_m,

			     onfi_interface__ready_busy_l_m__ready_busy_l,
			     EN_onfi_interface__ready_busy_l_m,
			     RDY_onfi_interface__ready_busy_l_m);
  input  CLK;
  input  RST_N;

  // action method nfcB_interface__address_from_nvm_m
  input  [11 : 0] nfcB_interface__address_from_nvm_m__address_from_nvm;
  input  EN_nfcB_interface__address_from_nvm_m;
  output RDY_nfcB_interface__address_from_nvm_m;

  // action method nfcB_interface__data_from_nvm_m
  input  [31 : 0] nfcB_interface__data_from_nvm_m__data_from_nvm;
  input  EN_nfcB_interface__data_from_nvm_m;
  output RDY_nfcB_interface__data_from_nvm_m;

  // value method nfcB_interface_data_to_nvm_
  output [31 : 0] nfcB_interface_data_to_nvm_;
  output RDY_nfcB_interface_data_to_nvm_;

  // action method nfcB_interface__nand_ce_l_m
  input  nfcB_interface__nand_ce_l_m__nand_ce_l;
  input  EN_nfcB_interface__nand_ce_l_m;
  output RDY_nfcB_interface__nand_ce_l_m;

  // action method nfcB_interface__nand_we_l_m
  input  nfcB_interface__nand_we_l_m__nand_we_l;
  input  EN_nfcB_interface__nand_we_l_m;
  output RDY_nfcB_interface__nand_we_l_m;

  // action method nfcB_interface__nand_oe_l_m
  input  nfcB_interface__nand_oe_l_m__nand_oe_l;
  input  EN_nfcB_interface__nand_oe_l_m;
  output RDY_nfcB_interface__nand_oe_l_m;

  // action method nfcB_interface__nand_reset_l_m
  input  nfcB_interface__nand_reset_l_m__nand_reset_l;
  input  EN_nfcB_interface__nand_reset_l_m;
  output RDY_nfcB_interface__nand_reset_l_m;

  // value method nfcB_interface_interrupt_
  output nfcB_interface_interrupt_;
  output RDY_nfcB_interface_interrupt_;

  // value method nfcB_interface_ready_busy_l_
  output nfcB_interface_ready_busy_l_;
  output RDY_nfcB_interface_ready_busy_l_;

  // action method onfi_interface__data_from_flash_m
  input  [15 : 0] onfi_interface__data_from_flash_m__data_from_flash;
  input  EN_onfi_interface__data_from_flash_m;
  output RDY_onfi_interface__data_from_flash_m;

  // value method onfi_interface_data_to_flash_
  output [15 : 0] onfi_interface_data_to_flash_;
  output RDY_onfi_interface_data_to_flash_;

  // value method onfi_interface_onfi_ce_l_
  output onfi_interface_onfi_ce_l_;
  output RDY_onfi_interface_onfi_ce_l_;

  // value method onfi_interface_onfi_we_l_
  output onfi_interface_onfi_we_l_;
  output RDY_onfi_interface_onfi_we_l_;

  // value method onfi_interface_onfi_re_l_
  output onfi_interface_onfi_re_l_;
  output RDY_onfi_interface_onfi_re_l_;

  // value method onfi_interface_onfi_wp_l_
  output onfi_interface_onfi_wp_l_;
  output RDY_onfi_interface_onfi_wp_l_;

  // value method onfi_interface_onfi_cle_
  output onfi_interface_onfi_cle_;
  output RDY_onfi_interface_onfi_cle_;

  // value method onfi_interface_onfi_ale_
  output onfi_interface_onfi_ale_;
  output RDY_onfi_interface_onfi_ale_;

  // action method onfi_interface__interrupt_m
  input  onfi_interface__interrupt_m__interrupt;
  input  EN_onfi_interface__interrupt_m;
  output RDY_onfi_interface__interrupt_m;

  // action method onfi_interface__ready_busy_l_m
  input  onfi_interface__ready_busy_l_m__ready_busy_l;
  input  EN_onfi_interface__ready_busy_l_m;
  output RDY_onfi_interface__ready_busy_l_m;

  // signals for module outputs
  wire [31 : 0] nfcB_interface_data_to_nvm_;
  wire [15 : 0] onfi_interface_data_to_flash_;
  wire RDY_nfcB_interface__address_from_nvm_m,
       RDY_nfcB_interface__data_from_nvm_m,
       RDY_nfcB_interface__nand_ce_l_m,
       RDY_nfcB_interface__nand_oe_l_m,
       RDY_nfcB_interface__nand_reset_l_m,
       RDY_nfcB_interface__nand_we_l_m,
       RDY_nfcB_interface_data_to_nvm_,
       RDY_nfcB_interface_interrupt_,
       RDY_nfcB_interface_ready_busy_l_,
       RDY_onfi_interface__data_from_flash_m,
       RDY_onfi_interface__interrupt_m,
       RDY_onfi_interface__ready_busy_l_m,
       RDY_onfi_interface_data_to_flash_,
       RDY_onfi_interface_onfi_ale_,
       RDY_onfi_interface_onfi_ce_l_,
       RDY_onfi_interface_onfi_cle_,
       RDY_onfi_interface_onfi_re_l_,
       RDY_onfi_interface_onfi_we_l_,
       RDY_onfi_interface_onfi_wp_l_,
       nfcB_interface_interrupt_,
       nfcB_interface_ready_busy_l_,
       onfi_interface_onfi_ale_,
       onfi_interface_onfi_ce_l_,
       onfi_interface_onfi_cle_,
       onfi_interface_onfi_re_l_,
       onfi_interface_onfi_we_l_,
       onfi_interface_onfi_wp_l_;

  // inlined wires
  wire [31 : 0] buffer0_serverAdapterB_outData_outData$wget,
		buffer1_serverAdapterB_outData_outData$wget;
  wire [1 : 0] buffer0_serverAdapterA_s1_1$wget,
	       buffer0_serverAdapterB_s1_1$wget,
	       buffer1_serverAdapterA_s1_1$wget,
	       buffer1_serverAdapterB_s1_1$wget;
  wire buffer0_serverAdapterA_cnt_1$whas,
       buffer0_serverAdapterA_outData_enqData$whas,
       buffer0_serverAdapterB_cnt_1$whas,
       buffer0_serverAdapterB_outData_enqData$whas,
       buffer0_serverAdapterB_outData_outData$whas,
       buffer1_serverAdapterA_cnt_1$whas,
       buffer1_serverAdapterA_outData_enqData$whas,
       buffer1_serverAdapterB_cnt_1$whas,
       buffer1_serverAdapterB_outData_enqData$whas,
       buffer1_serverAdapterB_outData_outData$whas;

  // register block_address
  reg [24 : 0] block_address;
  reg [24 : 0] block_address$D_IN;
  wire block_address$EN;

  // register buffer0_serverAdapterA_cnt
  reg [2 : 0] buffer0_serverAdapterA_cnt;
  wire [2 : 0] buffer0_serverAdapterA_cnt$D_IN;
  wire buffer0_serverAdapterA_cnt$EN;

  // register buffer0_serverAdapterA_s1
  reg [1 : 0] buffer0_serverAdapterA_s1;
  wire [1 : 0] buffer0_serverAdapterA_s1$D_IN;
  wire buffer0_serverAdapterA_s1$EN;

  // register buffer0_serverAdapterB_cnt
  reg [2 : 0] buffer0_serverAdapterB_cnt;
  wire [2 : 0] buffer0_serverAdapterB_cnt$D_IN;
  wire buffer0_serverAdapterB_cnt$EN;

  // register buffer0_serverAdapterB_s1
  reg [1 : 0] buffer0_serverAdapterB_s1;
  wire [1 : 0] buffer0_serverAdapterB_s1$D_IN;
  wire buffer0_serverAdapterB_s1$EN;

  // register buffer1_serverAdapterA_cnt
  reg [2 : 0] buffer1_serverAdapterA_cnt;
  wire [2 : 0] buffer1_serverAdapterA_cnt$D_IN;
  wire buffer1_serverAdapterA_cnt$EN;

  // register buffer1_serverAdapterA_s1
  reg [1 : 0] buffer1_serverAdapterA_s1;
  wire [1 : 0] buffer1_serverAdapterA_s1$D_IN;
  wire buffer1_serverAdapterA_s1$EN;

  // register buffer1_serverAdapterB_cnt
  reg [2 : 0] buffer1_serverAdapterB_cnt;
  wire [2 : 0] buffer1_serverAdapterB_cnt$D_IN;
  wire buffer1_serverAdapterB_cnt$EN;

  // register buffer1_serverAdapterB_s1
  reg [1 : 0] buffer1_serverAdapterB_s1;
  wire [1 : 0] buffer1_serverAdapterB_s1$D_IN;
  wire buffer1_serverAdapterB_s1$EN;

  // register buffer_address
  reg [11 : 0] buffer_address;
  wire [11 : 0] buffer_address$D_IN;
  wire buffer_address$EN;

  // register buffer_number
  reg buffer_number;
  wire buffer_number$D_IN, buffer_number$EN;

  // register command_register
  reg [7 : 0] command_register;
  wire [7 : 0] command_register$D_IN;
  wire command_register$EN;

  // register id_register0
  reg [7 : 0] id_register0;
  wire [7 : 0] id_register0$D_IN;
  wire id_register0$EN;

  // register id_register1
  reg [7 : 0] id_register1;
  wire [7 : 0] id_register1$D_IN;
  wire id_register1$EN;

  // register id_register2
  reg [7 : 0] id_register2;
  wire [7 : 0] id_register2$D_IN;
  wire id_register2$EN;

  // register id_register3
  reg [7 : 0] id_register3;
  wire [7 : 0] id_register3$D_IN;
  wire id_register3$EN;

  // register part_type_ECC
  reg [7 : 0] part_type_ECC;
  wire [7 : 0] part_type_ECC$D_IN;
  wire part_type_ECC$EN;

  // register rg_block_erase_state
  reg [3 : 0] rg_block_erase_state;
  reg [3 : 0] rg_block_erase_state$D_IN;
  wire rg_block_erase_state$EN;

  // register rg_command_execution
  reg rg_command_execution;
  wire rg_command_execution$D_IN, rg_command_execution$EN;

  // register rg_data_to_flash
  reg [15 : 0] rg_data_to_flash;
  reg [15 : 0] rg_data_to_flash$D_IN;
  wire rg_data_to_flash$EN;

  // register rg_data_to_nvm
  reg [31 : 0] rg_data_to_nvm;
  reg [31 : 0] rg_data_to_nvm$D_IN;
  wire rg_data_to_nvm$EN;

  // register rg_interrupt
  reg rg_interrupt;
  wire rg_interrupt$D_IN, rg_interrupt$EN;

  // register rg_nand_buffer_control
  reg rg_nand_buffer_control;
  wire rg_nand_buffer_control$D_IN, rg_nand_buffer_control$EN;

  // register rg_onfi_ale
  reg rg_onfi_ale;
  wire rg_onfi_ale$D_IN, rg_onfi_ale$EN;

  // register rg_onfi_ce_l
  reg rg_onfi_ce_l;
  wire rg_onfi_ce_l$D_IN, rg_onfi_ce_l$EN;

  // register rg_onfi_cle
  reg rg_onfi_cle;
  wire rg_onfi_cle$D_IN, rg_onfi_cle$EN;

  // register rg_onfi_re_l
  reg rg_onfi_re_l;
  wire rg_onfi_re_l$D_IN, rg_onfi_re_l$EN;

  // register rg_onfi_we_l
  reg rg_onfi_we_l;
  wire rg_onfi_we_l$D_IN, rg_onfi_we_l$EN;

  // register rg_onfi_wp_l
  reg rg_onfi_wp_l;
  wire rg_onfi_wp_l$D_IN, rg_onfi_wp_l$EN;

  // register rg_read_ID_state
  reg [3 : 0] rg_read_ID_state;
  reg [3 : 0] rg_read_ID_state$D_IN;
  wire rg_read_ID_state$EN;

  // register rg_read_state
  reg [3 : 0] rg_read_state;
  reg [3 : 0] rg_read_state$D_IN;
  wire rg_read_state$EN;

  // register rg_read_status_state
  reg [3 : 0] rg_read_status_state;
  reg [3 : 0] rg_read_status_state$D_IN;
  wire rg_read_status_state$EN;

  // register rg_ready_busy_l
  reg rg_ready_busy_l;
  wire rg_ready_busy_l$D_IN, rg_ready_busy_l$EN;

  // register rg_reset_state
  reg [3 : 0] rg_reset_state;
  reg [3 : 0] rg_reset_state$D_IN;
  wire rg_reset_state$EN;

  // register rg_state0
  reg [3 : 0] rg_state0;
  wire [3 : 0] rg_state0$D_IN;
  wire rg_state0$EN;

  // register rg_state1
  reg [3 : 0] rg_state1;
  wire [3 : 0] rg_state1$D_IN;
  wire rg_state1$EN;

  // register rg_temp_data_from_flash
  reg [15 : 0] rg_temp_data_from_flash;
  wire [15 : 0] rg_temp_data_from_flash$D_IN;
  wire rg_temp_data_from_flash$EN;

  // register rg_write_state
  reg [3 : 0] rg_write_state;
  reg [3 : 0] rg_write_state$D_IN;
  wire rg_write_state$EN;

  // register status_register
  reg [7 : 0] status_register;
  wire [7 : 0] status_register$D_IN;
  wire status_register$EN;

  // ports of submodule buffer0_memory
  wire [31 : 0] buffer0_memory$DIA,
		buffer0_memory$DIB,
		buffer0_memory$DOA,
		buffer0_memory$DOB;
  wire [9 : 0] buffer0_memory$ADDRA, buffer0_memory$ADDRB;
  wire buffer0_memory$ENA,
       buffer0_memory$ENB,
       buffer0_memory$WEA,
       buffer0_memory$WEB;

  // ports of submodule buffer0_serverAdapterA_outDataCore
  wire [31 : 0] buffer0_serverAdapterA_outDataCore$D_IN;
  wire buffer0_serverAdapterA_outDataCore$CLR,
       buffer0_serverAdapterA_outDataCore$DEQ,
       buffer0_serverAdapterA_outDataCore$EMPTY_N,
       buffer0_serverAdapterA_outDataCore$ENQ,
       buffer0_serverAdapterA_outDataCore$FULL_N;

  // ports of submodule buffer0_serverAdapterB_outDataCore
  wire [31 : 0] buffer0_serverAdapterB_outDataCore$D_IN,
		buffer0_serverAdapterB_outDataCore$D_OUT;
  wire buffer0_serverAdapterB_outDataCore$CLR,
       buffer0_serverAdapterB_outDataCore$DEQ,
       buffer0_serverAdapterB_outDataCore$EMPTY_N,
       buffer0_serverAdapterB_outDataCore$ENQ,
       buffer0_serverAdapterB_outDataCore$FULL_N;

  // ports of submodule buffer1_memory
  wire [31 : 0] buffer1_memory$DIA,
		buffer1_memory$DIB,
		buffer1_memory$DOA,
		buffer1_memory$DOB;
  wire [9 : 0] buffer1_memory$ADDRA, buffer1_memory$ADDRB;
  wire buffer1_memory$ENA,
       buffer1_memory$ENB,
       buffer1_memory$WEA,
       buffer1_memory$WEB;

  // ports of submodule buffer1_serverAdapterA_outDataCore
  wire [31 : 0] buffer1_serverAdapterA_outDataCore$D_IN;
  wire buffer1_serverAdapterA_outDataCore$CLR,
       buffer1_serverAdapterA_outDataCore$DEQ,
       buffer1_serverAdapterA_outDataCore$EMPTY_N,
       buffer1_serverAdapterA_outDataCore$ENQ,
       buffer1_serverAdapterA_outDataCore$FULL_N;

  // ports of submodule buffer1_serverAdapterB_outDataCore
  wire [31 : 0] buffer1_serverAdapterB_outDataCore$D_IN,
		buffer1_serverAdapterB_outDataCore$D_OUT;
  wire buffer1_serverAdapterB_outDataCore$CLR,
       buffer1_serverAdapterB_outDataCore$DEQ,
       buffer1_serverAdapterB_outDataCore$EMPTY_N,
       buffer1_serverAdapterB_outDataCore$ENQ,
       buffer1_serverAdapterB_outDataCore$FULL_N;

  // rule scheduling signals
  wire CAN_FIRE_RL_buffer0_serverAdapterA_cnt_finalAdd,
       CAN_FIRE_RL_buffer0_serverAdapterA_moveToOutFIFO,
       CAN_FIRE_RL_buffer0_serverAdapterA_outData_deqOnly,
       CAN_FIRE_RL_buffer0_serverAdapterA_outData_enqAndDeq,
       CAN_FIRE_RL_buffer0_serverAdapterA_outData_enqOnly,
       CAN_FIRE_RL_buffer0_serverAdapterA_outData_setFirstCore,
       CAN_FIRE_RL_buffer0_serverAdapterA_outData_setFirstEnq,
       CAN_FIRE_RL_buffer0_serverAdapterA_overRun,
       CAN_FIRE_RL_buffer0_serverAdapterA_s1__dreg_update,
       CAN_FIRE_RL_buffer0_serverAdapterA_stageReadResponseAlways,
       CAN_FIRE_RL_buffer0_serverAdapterB_cnt_finalAdd,
       CAN_FIRE_RL_buffer0_serverAdapterB_moveToOutFIFO,
       CAN_FIRE_RL_buffer0_serverAdapterB_outData_deqOnly,
       CAN_FIRE_RL_buffer0_serverAdapterB_outData_enqAndDeq,
       CAN_FIRE_RL_buffer0_serverAdapterB_outData_enqOnly,
       CAN_FIRE_RL_buffer0_serverAdapterB_outData_setFirstCore,
       CAN_FIRE_RL_buffer0_serverAdapterB_outData_setFirstEnq,
       CAN_FIRE_RL_buffer0_serverAdapterB_overRun,
       CAN_FIRE_RL_buffer0_serverAdapterB_s1__dreg_update,
       CAN_FIRE_RL_buffer0_serverAdapterB_stageReadResponseAlways,
       CAN_FIRE_RL_buffer1_serverAdapterA_cnt_finalAdd,
       CAN_FIRE_RL_buffer1_serverAdapterA_moveToOutFIFO,
       CAN_FIRE_RL_buffer1_serverAdapterA_outData_deqOnly,
       CAN_FIRE_RL_buffer1_serverAdapterA_outData_enqAndDeq,
       CAN_FIRE_RL_buffer1_serverAdapterA_outData_enqOnly,
       CAN_FIRE_RL_buffer1_serverAdapterA_outData_setFirstCore,
       CAN_FIRE_RL_buffer1_serverAdapterA_outData_setFirstEnq,
       CAN_FIRE_RL_buffer1_serverAdapterA_overRun,
       CAN_FIRE_RL_buffer1_serverAdapterA_s1__dreg_update,
       CAN_FIRE_RL_buffer1_serverAdapterA_stageReadResponseAlways,
       CAN_FIRE_RL_buffer1_serverAdapterB_cnt_finalAdd,
       CAN_FIRE_RL_buffer1_serverAdapterB_moveToOutFIFO,
       CAN_FIRE_RL_buffer1_serverAdapterB_outData_deqOnly,
       CAN_FIRE_RL_buffer1_serverAdapterB_outData_enqAndDeq,
       CAN_FIRE_RL_buffer1_serverAdapterB_outData_enqOnly,
       CAN_FIRE_RL_buffer1_serverAdapterB_outData_setFirstCore,
       CAN_FIRE_RL_buffer1_serverAdapterB_outData_setFirstEnq,
       CAN_FIRE_RL_buffer1_serverAdapterB_overRun,
       CAN_FIRE_RL_buffer1_serverAdapterB_s1__dreg_update,
       CAN_FIRE_RL_buffer1_serverAdapterB_stageReadResponseAlways,
       CAN_FIRE_RL_rl_command_execution,
       CAN_FIRE_RL_rl_disable,
       CAN_FIRE_RL_rl_disable_interrupt,
       CAN_FIRE_RL_rl_portB_buffer0,
       CAN_FIRE_RL_rl_portB_buffer1,
       CAN_FIRE_RL_rl_read,
       CAN_FIRE_RL_rl_write,
       CAN_FIRE_nfcB_interface__address_from_nvm_m,
       CAN_FIRE_nfcB_interface__data_from_nvm_m,
       CAN_FIRE_nfcB_interface__nand_ce_l_m,
       CAN_FIRE_nfcB_interface__nand_oe_l_m,
       CAN_FIRE_nfcB_interface__nand_reset_l_m,
       CAN_FIRE_nfcB_interface__nand_we_l_m,
       CAN_FIRE_onfi_interface__data_from_flash_m,
       CAN_FIRE_onfi_interface__interrupt_m,
       CAN_FIRE_onfi_interface__ready_busy_l_m,
       WILL_FIRE_RL_buffer0_serverAdapterA_cnt_finalAdd,
       WILL_FIRE_RL_buffer0_serverAdapterA_moveToOutFIFO,
       WILL_FIRE_RL_buffer0_serverAdapterA_outData_deqOnly,
       WILL_FIRE_RL_buffer0_serverAdapterA_outData_enqAndDeq,
       WILL_FIRE_RL_buffer0_serverAdapterA_outData_enqOnly,
       WILL_FIRE_RL_buffer0_serverAdapterA_outData_setFirstCore,
       WILL_FIRE_RL_buffer0_serverAdapterA_outData_setFirstEnq,
       WILL_FIRE_RL_buffer0_serverAdapterA_overRun,
       WILL_FIRE_RL_buffer0_serverAdapterA_s1__dreg_update,
       WILL_FIRE_RL_buffer0_serverAdapterA_stageReadResponseAlways,
       WILL_FIRE_RL_buffer0_serverAdapterB_cnt_finalAdd,
       WILL_FIRE_RL_buffer0_serverAdapterB_moveToOutFIFO,
       WILL_FIRE_RL_buffer0_serverAdapterB_outData_deqOnly,
       WILL_FIRE_RL_buffer0_serverAdapterB_outData_enqAndDeq,
       WILL_FIRE_RL_buffer0_serverAdapterB_outData_enqOnly,
       WILL_FIRE_RL_buffer0_serverAdapterB_outData_setFirstCore,
       WILL_FIRE_RL_buffer0_serverAdapterB_outData_setFirstEnq,
       WILL_FIRE_RL_buffer0_serverAdapterB_overRun,
       WILL_FIRE_RL_buffer0_serverAdapterB_s1__dreg_update,
       WILL_FIRE_RL_buffer0_serverAdapterB_stageReadResponseAlways,
       WILL_FIRE_RL_buffer1_serverAdapterA_cnt_finalAdd,
       WILL_FIRE_RL_buffer1_serverAdapterA_moveToOutFIFO,
       WILL_FIRE_RL_buffer1_serverAdapterA_outData_deqOnly,
       WILL_FIRE_RL_buffer1_serverAdapterA_outData_enqAndDeq,
       WILL_FIRE_RL_buffer1_serverAdapterA_outData_enqOnly,
       WILL_FIRE_RL_buffer1_serverAdapterA_outData_setFirstCore,
       WILL_FIRE_RL_buffer1_serverAdapterA_outData_setFirstEnq,
       WILL_FIRE_RL_buffer1_serverAdapterA_overRun,
       WILL_FIRE_RL_buffer1_serverAdapterA_s1__dreg_update,
       WILL_FIRE_RL_buffer1_serverAdapterA_stageReadResponseAlways,
       WILL_FIRE_RL_buffer1_serverAdapterB_cnt_finalAdd,
       WILL_FIRE_RL_buffer1_serverAdapterB_moveToOutFIFO,
       WILL_FIRE_RL_buffer1_serverAdapterB_outData_deqOnly,
       WILL_FIRE_RL_buffer1_serverAdapterB_outData_enqAndDeq,
       WILL_FIRE_RL_buffer1_serverAdapterB_outData_enqOnly,
       WILL_FIRE_RL_buffer1_serverAdapterB_outData_setFirstCore,
       WILL_FIRE_RL_buffer1_serverAdapterB_outData_setFirstEnq,
       WILL_FIRE_RL_buffer1_serverAdapterB_overRun,
       WILL_FIRE_RL_buffer1_serverAdapterB_s1__dreg_update,
       WILL_FIRE_RL_buffer1_serverAdapterB_stageReadResponseAlways,
       WILL_FIRE_RL_rl_command_execution,
       WILL_FIRE_RL_rl_disable,
       WILL_FIRE_RL_rl_disable_interrupt,
       WILL_FIRE_RL_rl_portB_buffer0,
       WILL_FIRE_RL_rl_portB_buffer1,
       WILL_FIRE_RL_rl_read,
       WILL_FIRE_RL_rl_write,
       WILL_FIRE_nfcB_interface__address_from_nvm_m,
       WILL_FIRE_nfcB_interface__data_from_nvm_m,
       WILL_FIRE_nfcB_interface__nand_ce_l_m,
       WILL_FIRE_nfcB_interface__nand_oe_l_m,
       WILL_FIRE_nfcB_interface__nand_reset_l_m,
       WILL_FIRE_nfcB_interface__nand_we_l_m,
       WILL_FIRE_onfi_interface__data_from_flash_m,
       WILL_FIRE_onfi_interface__interrupt_m,
       WILL_FIRE_onfi_interface__ready_busy_l_m;

  // inputs to muxes for submodule ports
  reg [15 : 0] MUX_rg_data_to_flash$write_1__VAL_3;
  wire [15 : 0] MUX_rg_data_to_flash$write_1__VAL_1,
		MUX_rg_data_to_flash$write_1__VAL_2;
  wire MUX_buffer0_memory$a_put_1__SEL_1,
       MUX_buffer0_memory$a_put_1__SEL_2,
       MUX_buffer1_memory$a_put_1__SEL_1,
       MUX_buffer1_memory$a_put_1__SEL_2,
       MUX_buffer_number$write_1__SEL_1,
       MUX_buffer_number$write_1__SEL_2,
       MUX_buffer_number$write_1__VAL_2,
       MUX_rg_command_execution$write_1__SEL_1,
       MUX_rg_command_execution$write_1__SEL_2,
       MUX_rg_data_to_flash$write_1__SEL_1,
       MUX_rg_data_to_flash$write_1__SEL_2,
       MUX_rg_data_to_flash$write_1__SEL_3,
       MUX_rg_interrupt$write_1__SEL_1;

  // remaining internal signals
  reg [15 : 0] CASE_rg_block_erase_state_x2793_0_x3244_1_x5801__q5,
	       CASE_rg_read_state_x2793_0_x3244_1_x5801__q4,
	       CASE_rg_write_state_x2793_0_x3244_1_x5801__q3;
  reg CASE_command_register_NOT_rg_reset_state_EQ_1__ETC__q2,
      CASE_command_register_rg_reset_state_EQ_1_0x70_ETC__q1;
  wire [31 : 0] x3__h11738,
		x3__h8541,
		x__h10074,
		x__h10144,
		x__h10212,
		x__h10280,
		x__h10348,
		x__h10442,
		x__h10536,
		x__h10630,
		x__h10710,
		x__h10814,
		x__h10854;
  wire [24 : 0] x__h8737, x__h8954, x__h9172;
  wire [15 : 0] IF_wr_data_from_flash_whas__34_THEN_wr_data_fr_ETC___d744,
		x__h12793,
		x__h13244,
		x__h15801;
  wire [11 : 0] IF_wr_address_from_nvm_whas__47_THEN_wr_addres_ETC___d745,
		x__h12629;
  wire [2 : 0] buffer0_serverAdapterB_cnt_3_PLUS_IF_buffer0_s_ETC___d89,
	       buffer1_serverAdapterB_cnt_97_PLUS_IF_buffer1__ETC___d203;
  wire [1 : 0] ab__h3039, ab__h4438, ab__h6002, ab__h7401;
  wire IF_command_register_05_EQ_0x10_39_THEN_rg_writ_ETC___d439,
       IF_wr_address_from_nvm_whas__47_THEN_wr_addres_ETC___d250,
       NOT_command_register_05_EQ_0x10_39_58_AND_NOT__ETC___d573,
       NOT_command_register_05_EQ_0x10_39_58_AND_comm_ETC___d396,
       NOT_command_register_05_EQ_0x60_59_15_AND_IF_c_ETC___d425,
       NOT_command_register_05_EQ_0x70_70_76_AND_comm_ETC___d391,
       NOT_command_register_05_EQ_0xD0_60_69_AND_comm_ETC___d393,
       buffer_address_16_ULT_0x3FF___d751,
       buffer_address_16_ULT_0x7FF___d752,
       command_register_05_EQ_0x0_12_OR_command_regis_ETC___d401,
       command_register_05_EQ_0x10_39_AND_rg_write_st_ETC___d397,
       command_register_05_EQ_0x10_39_AND_rg_write_st_ETC___d463,
       command_register_05_EQ_0x10_39_AND_rg_write_st_ETC___d647,
       command_register_05_EQ_0x30_13_AND_rg_read_sta_ETC___d466,
       command_register_05_EQ_0x30_13_AND_rg_read_sta_ETC___d531,
       command_register_05_EQ_0x30_13_AND_rg_read_sta_ETC___d551,
       command_register_05_EQ_0x30_13_AND_rg_read_sta_ETC___d596,
       command_register_05_EQ_0x70_70_AND_rg_read_sta_ETC___d458,
       command_register_05_EQ_0x70_70_AND_rg_read_sta_ETC___d569,
       command_register_05_EQ_0xD0_60_AND_rg_block_er_ETC___d661,
       command_register_05_EQ_0xFF_83_AND_rg_reset_st_ETC___d389,
       rg_read_state_14_EQ_5_23_AND_NOT_wr_ready_busy_ETC___d589,
       rg_write_state_40_EQ_4_47_AND_wr_ready_busy_l__ETC___d630,
       wr_nand_ce_l_whas__29_AND_NOT_wr_nand_ce_l_wge_ETC___d245;

  // action method nfcB_interface__address_from_nvm_m
  assign RDY_nfcB_interface__address_from_nvm_m = 1'd1 ;
  assign CAN_FIRE_nfcB_interface__address_from_nvm_m = 1'd1 ;
  assign WILL_FIRE_nfcB_interface__address_from_nvm_m =
	     EN_nfcB_interface__address_from_nvm_m ;

  // action method nfcB_interface__data_from_nvm_m
  assign RDY_nfcB_interface__data_from_nvm_m = 1'd1 ;
  assign CAN_FIRE_nfcB_interface__data_from_nvm_m = 1'd1 ;
  assign WILL_FIRE_nfcB_interface__data_from_nvm_m =
	     EN_nfcB_interface__data_from_nvm_m ;

  // value method nfcB_interface_data_to_nvm_
  assign nfcB_interface_data_to_nvm_ = rg_data_to_nvm ;
  assign RDY_nfcB_interface_data_to_nvm_ = 1'd1 ;

  // action method nfcB_interface__nand_ce_l_m
  assign RDY_nfcB_interface__nand_ce_l_m = 1'd1 ;
  assign CAN_FIRE_nfcB_interface__nand_ce_l_m = 1'd1 ;
  assign WILL_FIRE_nfcB_interface__nand_ce_l_m =
	     EN_nfcB_interface__nand_ce_l_m ;

  // action method nfcB_interface__nand_we_l_m
  assign RDY_nfcB_interface__nand_we_l_m = 1'd1 ;
  assign CAN_FIRE_nfcB_interface__nand_we_l_m = 1'd1 ;
  assign WILL_FIRE_nfcB_interface__nand_we_l_m =
	     EN_nfcB_interface__nand_we_l_m ;

  // action method nfcB_interface__nand_oe_l_m
  assign RDY_nfcB_interface__nand_oe_l_m = 1'd1 ;
  assign CAN_FIRE_nfcB_interface__nand_oe_l_m = 1'd1 ;
  assign WILL_FIRE_nfcB_interface__nand_oe_l_m =
	     EN_nfcB_interface__nand_oe_l_m ;

  // action method nfcB_interface__nand_reset_l_m
  assign RDY_nfcB_interface__nand_reset_l_m = 1'd1 ;
  assign CAN_FIRE_nfcB_interface__nand_reset_l_m = 1'd1 ;
  assign WILL_FIRE_nfcB_interface__nand_reset_l_m =
	     EN_nfcB_interface__nand_reset_l_m ;

  // value method nfcB_interface_interrupt_
  assign nfcB_interface_interrupt_ = rg_interrupt ;
  assign RDY_nfcB_interface_interrupt_ = 1'd1 ;

  // value method nfcB_interface_ready_busy_l_
  assign nfcB_interface_ready_busy_l_ = rg_ready_busy_l ;
  assign RDY_nfcB_interface_ready_busy_l_ = 1'd1 ;

  // action method onfi_interface__data_from_flash_m
  assign RDY_onfi_interface__data_from_flash_m = 1'd1 ;
  assign CAN_FIRE_onfi_interface__data_from_flash_m = 1'd1 ;
  assign WILL_FIRE_onfi_interface__data_from_flash_m =
	     EN_onfi_interface__data_from_flash_m ;

  // value method onfi_interface_data_to_flash_
  assign onfi_interface_data_to_flash_ = rg_data_to_flash ;
  assign RDY_onfi_interface_data_to_flash_ = 1'd1 ;

  // value method onfi_interface_onfi_ce_l_
  assign onfi_interface_onfi_ce_l_ = rg_onfi_ce_l ;
  assign RDY_onfi_interface_onfi_ce_l_ = 1'd1 ;

  // value method onfi_interface_onfi_we_l_
  assign onfi_interface_onfi_we_l_ = rg_onfi_we_l ;
  assign RDY_onfi_interface_onfi_we_l_ = 1'd1 ;

  // value method onfi_interface_onfi_re_l_
  assign onfi_interface_onfi_re_l_ = rg_onfi_re_l ;
  assign RDY_onfi_interface_onfi_re_l_ = 1'd1 ;

  // value method onfi_interface_onfi_wp_l_
  assign onfi_interface_onfi_wp_l_ = rg_onfi_wp_l ;
  assign RDY_onfi_interface_onfi_wp_l_ = 1'd1 ;

  // value method onfi_interface_onfi_cle_
  assign onfi_interface_onfi_cle_ = rg_onfi_cle ;
  assign RDY_onfi_interface_onfi_cle_ = 1'd1 ;

  // value method onfi_interface_onfi_ale_
  assign onfi_interface_onfi_ale_ = rg_onfi_ale ;
  assign RDY_onfi_interface_onfi_ale_ = 1'd1 ;

  // action method onfi_interface__interrupt_m
  assign RDY_onfi_interface__interrupt_m = 1'd1 ;
  assign CAN_FIRE_onfi_interface__interrupt_m = 1'd1 ;
  assign WILL_FIRE_onfi_interface__interrupt_m =
	     EN_onfi_interface__interrupt_m ;

  // action method onfi_interface__ready_busy_l_m
  assign RDY_onfi_interface__ready_busy_l_m = 1'd1 ;
  assign CAN_FIRE_onfi_interface__ready_busy_l_m = 1'd1 ;
  assign WILL_FIRE_onfi_interface__ready_busy_l_m =
	     EN_onfi_interface__ready_busy_l_m ;

  // submodule buffer0_memory
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd10),
	  .DATA_WIDTH(32'd32),
	  .MEMSIZE(11'd1024)) buffer0_memory(.CLKA(CLK),
					     .CLKB(CLK),
					     .ADDRA(buffer0_memory$ADDRA),
					     .ADDRB(buffer0_memory$ADDRB),
					     .DIA(buffer0_memory$DIA),
					     .DIB(buffer0_memory$DIB),
					     .WEA(buffer0_memory$WEA),
					     .WEB(buffer0_memory$WEB),
					     .ENA(buffer0_memory$ENA),
					     .ENB(buffer0_memory$ENB),
					     .DOA(buffer0_memory$DOA),
					     .DOB(buffer0_memory$DOB));

  // submodule buffer0_serverAdapterA_outDataCore
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) buffer0_serverAdapterA_outDataCore(.RST_N(RST_N),
								  .CLK(CLK),
								  .D_IN(buffer0_serverAdapterA_outDataCore$D_IN),
								  .ENQ(buffer0_serverAdapterA_outDataCore$ENQ),
								  .DEQ(buffer0_serverAdapterA_outDataCore$DEQ),
								  .CLR(buffer0_serverAdapterA_outDataCore$CLR),
								  .D_OUT(),
								  .FULL_N(buffer0_serverAdapterA_outDataCore$FULL_N),
								  .EMPTY_N(buffer0_serverAdapterA_outDataCore$EMPTY_N));

  // submodule buffer0_serverAdapterB_outDataCore
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) buffer0_serverAdapterB_outDataCore(.RST_N(RST_N),
								  .CLK(CLK),
								  .D_IN(buffer0_serverAdapterB_outDataCore$D_IN),
								  .ENQ(buffer0_serverAdapterB_outDataCore$ENQ),
								  .DEQ(buffer0_serverAdapterB_outDataCore$DEQ),
								  .CLR(buffer0_serverAdapterB_outDataCore$CLR),
								  .D_OUT(buffer0_serverAdapterB_outDataCore$D_OUT),
								  .FULL_N(buffer0_serverAdapterB_outDataCore$FULL_N),
								  .EMPTY_N(buffer0_serverAdapterB_outDataCore$EMPTY_N));

  // submodule buffer1_memory
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd10),
	  .DATA_WIDTH(32'd32),
	  .MEMSIZE(11'd1024)) buffer1_memory(.CLKA(CLK),
					     .CLKB(CLK),
					     .ADDRA(buffer1_memory$ADDRA),
					     .ADDRB(buffer1_memory$ADDRB),
					     .DIA(buffer1_memory$DIA),
					     .DIB(buffer1_memory$DIB),
					     .WEA(buffer1_memory$WEA),
					     .WEB(buffer1_memory$WEB),
					     .ENA(buffer1_memory$ENA),
					     .ENB(buffer1_memory$ENB),
					     .DOA(buffer1_memory$DOA),
					     .DOB(buffer1_memory$DOB));

  // submodule buffer1_serverAdapterA_outDataCore
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) buffer1_serverAdapterA_outDataCore(.RST_N(RST_N),
								  .CLK(CLK),
								  .D_IN(buffer1_serverAdapterA_outDataCore$D_IN),
								  .ENQ(buffer1_serverAdapterA_outDataCore$ENQ),
								  .DEQ(buffer1_serverAdapterA_outDataCore$DEQ),
								  .CLR(buffer1_serverAdapterA_outDataCore$CLR),
								  .D_OUT(),
								  .FULL_N(buffer1_serverAdapterA_outDataCore$FULL_N),
								  .EMPTY_N(buffer1_serverAdapterA_outDataCore$EMPTY_N));

  // submodule buffer1_serverAdapterB_outDataCore
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) buffer1_serverAdapterB_outDataCore(.RST_N(RST_N),
								  .CLK(CLK),
								  .D_IN(buffer1_serverAdapterB_outDataCore$D_IN),
								  .ENQ(buffer1_serverAdapterB_outDataCore$ENQ),
								  .DEQ(buffer1_serverAdapterB_outDataCore$DEQ),
								  .CLR(buffer1_serverAdapterB_outDataCore$CLR),
								  .D_OUT(buffer1_serverAdapterB_outDataCore$D_OUT),
								  .FULL_N(buffer1_serverAdapterB_outDataCore$FULL_N),
								  .EMPTY_N(buffer1_serverAdapterB_outDataCore$EMPTY_N));

  // rule RL_rl_disable
  assign CAN_FIRE_RL_rl_disable =
	     !EN_nfcB_interface__nand_ce_l_m ||
	     nfcB_interface__nand_ce_l_m__nand_ce_l ;
  assign WILL_FIRE_RL_rl_disable = CAN_FIRE_RL_rl_disable ;

  // rule RL_rl_write
  assign CAN_FIRE_RL_rl_write =
	     (buffer1_serverAdapterA_cnt ^ 3'h4) < 3'd7 &&
	     (buffer0_serverAdapterA_cnt ^ 3'h4) < 3'd7 &&
	     wr_nand_ce_l_whas__29_AND_NOT_wr_nand_ce_l_wge_ETC___d245 ;
  assign WILL_FIRE_RL_rl_write = CAN_FIRE_RL_rl_write ;

  // rule RL_rl_read
  assign CAN_FIRE_RL_rl_read =
	     (buffer1_serverAdapterA_cnt ^ 3'h4) < 3'd7 &&
	     (buffer0_serverAdapterA_cnt ^ 3'h4) < 3'd7 &&
	     EN_nfcB_interface__nand_ce_l_m &&
	     !nfcB_interface__nand_ce_l_m__nand_ce_l &&
	     EN_nfcB_interface__nand_oe_l_m &&
	     !nfcB_interface__nand_oe_l_m__nand_oe_l ;
  assign WILL_FIRE_RL_rl_read =
	     CAN_FIRE_RL_rl_read && !WILL_FIRE_RL_rl_write ;

  // rule RL_rl_disable_interrupt
  assign CAN_FIRE_RL_rl_disable_interrupt = rg_interrupt ;
  assign WILL_FIRE_RL_rl_disable_interrupt = rg_interrupt ;

  // rule RL_rl_command_execution
  assign CAN_FIRE_RL_rl_command_execution =
	     (buffer1_serverAdapterB_cnt ^ 3'h4) < 3'd7 &&
	     (buffer0_serverAdapterB_cnt ^ 3'h4) < 3'd7 &&
	     rg_command_execution &&
	     EN_nfcB_interface__nand_ce_l_m &&
	     !nfcB_interface__nand_ce_l_m__nand_ce_l ;
  assign WILL_FIRE_RL_rl_command_execution =
	     CAN_FIRE_RL_rl_command_execution ;

  // rule RL_buffer0_serverAdapterA_stageReadResponseAlways
  assign CAN_FIRE_RL_buffer0_serverAdapterA_stageReadResponseAlways =
	     MUX_buffer0_memory$a_put_1__SEL_1 ||
	     MUX_buffer0_memory$a_put_1__SEL_2 ;
  assign WILL_FIRE_RL_buffer0_serverAdapterA_stageReadResponseAlways =
	     CAN_FIRE_RL_buffer0_serverAdapterA_stageReadResponseAlways ;

  // rule RL_buffer0_serverAdapterA_moveToOutFIFO
  assign CAN_FIRE_RL_buffer0_serverAdapterA_moveToOutFIFO =
	     buffer0_serverAdapterA_outDataCore$FULL_N &&
	     buffer0_serverAdapterA_s1[1] ;
  assign WILL_FIRE_RL_buffer0_serverAdapterA_moveToOutFIFO =
	     CAN_FIRE_RL_buffer0_serverAdapterA_moveToOutFIFO ;

  // rule RL_buffer0_serverAdapterA_overRun
  assign CAN_FIRE_RL_buffer0_serverAdapterA_overRun =
	     buffer0_serverAdapterA_s1[1] &&
	     !buffer0_serverAdapterA_outDataCore$FULL_N ;
  assign WILL_FIRE_RL_buffer0_serverAdapterA_overRun =
	     CAN_FIRE_RL_buffer0_serverAdapterA_overRun ;

  // rule RL_buffer0_serverAdapterA_outData_setFirstCore
  assign CAN_FIRE_RL_buffer0_serverAdapterA_outData_setFirstCore =
	     buffer0_serverAdapterA_outDataCore$EMPTY_N ;
  assign WILL_FIRE_RL_buffer0_serverAdapterA_outData_setFirstCore =
	     buffer0_serverAdapterA_outDataCore$EMPTY_N ;

  // rule RL_buffer0_serverAdapterA_outData_setFirstEnq
  assign CAN_FIRE_RL_buffer0_serverAdapterA_outData_setFirstEnq =
	     !buffer0_serverAdapterA_outDataCore$EMPTY_N &&
	     buffer0_serverAdapterA_outData_enqData$whas ;
  assign WILL_FIRE_RL_buffer0_serverAdapterA_outData_setFirstEnq =
	     CAN_FIRE_RL_buffer0_serverAdapterA_outData_setFirstEnq ;

  // rule RL_buffer0_serverAdapterA_outData_enqOnly
  assign CAN_FIRE_RL_buffer0_serverAdapterA_outData_enqOnly =
	     buffer0_serverAdapterA_outDataCore$FULL_N &&
	     buffer0_serverAdapterA_outData_enqData$whas ;
  assign WILL_FIRE_RL_buffer0_serverAdapterA_outData_enqOnly =
	     CAN_FIRE_RL_buffer0_serverAdapterA_outData_enqOnly ;

  // rule RL_buffer0_serverAdapterA_outData_deqOnly
  assign CAN_FIRE_RL_buffer0_serverAdapterA_outData_deqOnly = 1'b0 ;
  assign WILL_FIRE_RL_buffer0_serverAdapterA_outData_deqOnly = 1'b0 ;

  // rule RL_buffer0_serverAdapterA_outData_enqAndDeq
  assign CAN_FIRE_RL_buffer0_serverAdapterA_outData_enqAndDeq = 1'b0 ;
  assign WILL_FIRE_RL_buffer0_serverAdapterA_outData_enqAndDeq = 1'b0 ;

  // rule RL_buffer0_serverAdapterA_cnt_finalAdd
  assign CAN_FIRE_RL_buffer0_serverAdapterA_cnt_finalAdd =
	     buffer0_serverAdapterA_cnt_1$whas ;
  assign WILL_FIRE_RL_buffer0_serverAdapterA_cnt_finalAdd =
	     buffer0_serverAdapterA_cnt_1$whas ;

  // rule RL_buffer0_serverAdapterA_s1__dreg_update
  assign CAN_FIRE_RL_buffer0_serverAdapterA_s1__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_buffer0_serverAdapterA_s1__dreg_update = 1'd1 ;

  // rule RL_buffer0_serverAdapterB_stageReadResponseAlways
  assign CAN_FIRE_RL_buffer0_serverAdapterB_stageReadResponseAlways =
	     WILL_FIRE_RL_rl_command_execution && command_register != 8'h0 &&
	     command_register_05_EQ_0x30_13_AND_rg_read_sta_ETC___d551 ;
  assign WILL_FIRE_RL_buffer0_serverAdapterB_stageReadResponseAlways =
	     CAN_FIRE_RL_buffer0_serverAdapterB_stageReadResponseAlways ;

  // rule RL_buffer0_serverAdapterB_moveToOutFIFO
  assign CAN_FIRE_RL_buffer0_serverAdapterB_moveToOutFIFO =
	     buffer0_serverAdapterB_outDataCore$FULL_N &&
	     buffer0_serverAdapterB_s1[1] ;
  assign WILL_FIRE_RL_buffer0_serverAdapterB_moveToOutFIFO =
	     CAN_FIRE_RL_buffer0_serverAdapterB_moveToOutFIFO ;

  // rule RL_buffer0_serverAdapterB_overRun
  assign CAN_FIRE_RL_buffer0_serverAdapterB_overRun =
	     buffer0_serverAdapterB_s1[1] &&
	     !buffer0_serverAdapterB_outDataCore$FULL_N ;
  assign WILL_FIRE_RL_buffer0_serverAdapterB_overRun =
	     CAN_FIRE_RL_buffer0_serverAdapterB_overRun ;

  // rule RL_buffer0_serverAdapterB_outData_setFirstCore
  assign CAN_FIRE_RL_buffer0_serverAdapterB_outData_setFirstCore =
	     buffer0_serverAdapterB_outDataCore$EMPTY_N ;
  assign WILL_FIRE_RL_buffer0_serverAdapterB_outData_setFirstCore =
	     buffer0_serverAdapterB_outDataCore$EMPTY_N ;

  // rule RL_buffer0_serverAdapterB_outData_setFirstEnq
  assign CAN_FIRE_RL_buffer0_serverAdapterB_outData_setFirstEnq =
	     !buffer0_serverAdapterB_outDataCore$EMPTY_N &&
	     buffer0_serverAdapterB_outData_enqData$whas ;
  assign WILL_FIRE_RL_buffer0_serverAdapterB_outData_setFirstEnq =
	     CAN_FIRE_RL_buffer0_serverAdapterB_outData_setFirstEnq ;

  // rule RL_rl_portB_buffer0
  assign CAN_FIRE_RL_rl_portB_buffer0 =
	     (buffer0_serverAdapterB_outDataCore$EMPTY_N ||
	      buffer0_serverAdapterB_outData_enqData$whas) &&
	     buffer0_serverAdapterB_outData_outData$whas ;
  assign WILL_FIRE_RL_rl_portB_buffer0 = CAN_FIRE_RL_rl_portB_buffer0 ;

  // rule RL_buffer0_serverAdapterB_outData_enqOnly
  assign CAN_FIRE_RL_buffer0_serverAdapterB_outData_enqOnly =
	     buffer0_serverAdapterB_outDataCore$FULL_N &&
	     !MUX_rg_data_to_flash$write_1__SEL_2 &&
	     buffer0_serverAdapterB_outData_enqData$whas ;
  assign WILL_FIRE_RL_buffer0_serverAdapterB_outData_enqOnly =
	     CAN_FIRE_RL_buffer0_serverAdapterB_outData_enqOnly ;

  // rule RL_buffer0_serverAdapterB_outData_deqOnly
  assign CAN_FIRE_RL_buffer0_serverAdapterB_outData_deqOnly =
	     buffer0_serverAdapterB_outDataCore$EMPTY_N &&
	     MUX_rg_data_to_flash$write_1__SEL_2 &&
	     !buffer0_serverAdapterB_outData_enqData$whas ;
  assign WILL_FIRE_RL_buffer0_serverAdapterB_outData_deqOnly =
	     CAN_FIRE_RL_buffer0_serverAdapterB_outData_deqOnly ;

  // rule RL_buffer0_serverAdapterB_outData_enqAndDeq
  assign CAN_FIRE_RL_buffer0_serverAdapterB_outData_enqAndDeq =
	     buffer0_serverAdapterB_outDataCore$EMPTY_N &&
	     buffer0_serverAdapterB_outDataCore$FULL_N &&
	     MUX_rg_data_to_flash$write_1__SEL_2 &&
	     buffer0_serverAdapterB_outData_enqData$whas ;
  assign WILL_FIRE_RL_buffer0_serverAdapterB_outData_enqAndDeq =
	     CAN_FIRE_RL_buffer0_serverAdapterB_outData_enqAndDeq ;

  // rule RL_buffer0_serverAdapterB_cnt_finalAdd
  assign CAN_FIRE_RL_buffer0_serverAdapterB_cnt_finalAdd =
	     buffer0_serverAdapterB_cnt_1$whas ||
	     MUX_rg_data_to_flash$write_1__SEL_2 ;
  assign WILL_FIRE_RL_buffer0_serverAdapterB_cnt_finalAdd =
	     CAN_FIRE_RL_buffer0_serverAdapterB_cnt_finalAdd ;

  // rule RL_buffer0_serverAdapterB_s1__dreg_update
  assign CAN_FIRE_RL_buffer0_serverAdapterB_s1__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_buffer0_serverAdapterB_s1__dreg_update = 1'd1 ;

  // rule RL_buffer1_serverAdapterA_stageReadResponseAlways
  assign CAN_FIRE_RL_buffer1_serverAdapterA_stageReadResponseAlways =
	     MUX_buffer1_memory$a_put_1__SEL_1 ||
	     MUX_buffer1_memory$a_put_1__SEL_2 ;
  assign WILL_FIRE_RL_buffer1_serverAdapterA_stageReadResponseAlways =
	     CAN_FIRE_RL_buffer1_serverAdapterA_stageReadResponseAlways ;

  // rule RL_buffer1_serverAdapterA_moveToOutFIFO
  assign CAN_FIRE_RL_buffer1_serverAdapterA_moveToOutFIFO =
	     buffer1_serverAdapterA_outDataCore$FULL_N &&
	     buffer1_serverAdapterA_s1[1] ;
  assign WILL_FIRE_RL_buffer1_serverAdapterA_moveToOutFIFO =
	     CAN_FIRE_RL_buffer1_serverAdapterA_moveToOutFIFO ;

  // rule RL_buffer1_serverAdapterA_overRun
  assign CAN_FIRE_RL_buffer1_serverAdapterA_overRun =
	     buffer1_serverAdapterA_s1[1] &&
	     !buffer1_serverAdapterA_outDataCore$FULL_N ;
  assign WILL_FIRE_RL_buffer1_serverAdapterA_overRun =
	     CAN_FIRE_RL_buffer1_serverAdapterA_overRun ;

  // rule RL_buffer1_serverAdapterA_outData_setFirstCore
  assign CAN_FIRE_RL_buffer1_serverAdapterA_outData_setFirstCore =
	     buffer1_serverAdapterA_outDataCore$EMPTY_N ;
  assign WILL_FIRE_RL_buffer1_serverAdapterA_outData_setFirstCore =
	     buffer1_serverAdapterA_outDataCore$EMPTY_N ;

  // rule RL_buffer1_serverAdapterA_outData_setFirstEnq
  assign CAN_FIRE_RL_buffer1_serverAdapterA_outData_setFirstEnq =
	     !buffer1_serverAdapterA_outDataCore$EMPTY_N &&
	     buffer1_serverAdapterA_outData_enqData$whas ;
  assign WILL_FIRE_RL_buffer1_serverAdapterA_outData_setFirstEnq =
	     CAN_FIRE_RL_buffer1_serverAdapterA_outData_setFirstEnq ;

  // rule RL_buffer1_serverAdapterA_outData_enqOnly
  assign CAN_FIRE_RL_buffer1_serverAdapterA_outData_enqOnly =
	     buffer1_serverAdapterA_outDataCore$FULL_N &&
	     buffer1_serverAdapterA_outData_enqData$whas ;
  assign WILL_FIRE_RL_buffer1_serverAdapterA_outData_enqOnly =
	     CAN_FIRE_RL_buffer1_serverAdapterA_outData_enqOnly ;

  // rule RL_buffer1_serverAdapterA_outData_deqOnly
  assign CAN_FIRE_RL_buffer1_serverAdapterA_outData_deqOnly = 1'b0 ;
  assign WILL_FIRE_RL_buffer1_serverAdapterA_outData_deqOnly = 1'b0 ;

  // rule RL_buffer1_serverAdapterA_outData_enqAndDeq
  assign CAN_FIRE_RL_buffer1_serverAdapterA_outData_enqAndDeq = 1'b0 ;
  assign WILL_FIRE_RL_buffer1_serverAdapterA_outData_enqAndDeq = 1'b0 ;

  // rule RL_buffer1_serverAdapterA_cnt_finalAdd
  assign CAN_FIRE_RL_buffer1_serverAdapterA_cnt_finalAdd =
	     buffer1_serverAdapterA_cnt_1$whas ;
  assign WILL_FIRE_RL_buffer1_serverAdapterA_cnt_finalAdd =
	     buffer1_serverAdapterA_cnt_1$whas ;

  // rule RL_buffer1_serverAdapterA_s1__dreg_update
  assign CAN_FIRE_RL_buffer1_serverAdapterA_s1__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_buffer1_serverAdapterA_s1__dreg_update = 1'd1 ;

  // rule RL_buffer1_serverAdapterB_stageReadResponseAlways
  assign CAN_FIRE_RL_buffer1_serverAdapterB_stageReadResponseAlways =
	     WILL_FIRE_RL_rl_command_execution && command_register != 8'h0 &&
	     command_register_05_EQ_0x30_13_AND_rg_read_sta_ETC___d531 ;
  assign WILL_FIRE_RL_buffer1_serverAdapterB_stageReadResponseAlways =
	     CAN_FIRE_RL_buffer1_serverAdapterB_stageReadResponseAlways ;

  // rule RL_buffer1_serverAdapterB_moveToOutFIFO
  assign CAN_FIRE_RL_buffer1_serverAdapterB_moveToOutFIFO =
	     buffer1_serverAdapterB_outDataCore$FULL_N &&
	     buffer1_serverAdapterB_s1[1] ;
  assign WILL_FIRE_RL_buffer1_serverAdapterB_moveToOutFIFO =
	     CAN_FIRE_RL_buffer1_serverAdapterB_moveToOutFIFO ;

  // rule RL_buffer1_serverAdapterB_overRun
  assign CAN_FIRE_RL_buffer1_serverAdapterB_overRun =
	     buffer1_serverAdapterB_s1[1] &&
	     !buffer1_serverAdapterB_outDataCore$FULL_N ;
  assign WILL_FIRE_RL_buffer1_serverAdapterB_overRun =
	     CAN_FIRE_RL_buffer1_serverAdapterB_overRun ;

  // rule RL_buffer1_serverAdapterB_outData_setFirstCore
  assign CAN_FIRE_RL_buffer1_serverAdapterB_outData_setFirstCore =
	     buffer1_serverAdapterB_outDataCore$EMPTY_N ;
  assign WILL_FIRE_RL_buffer1_serverAdapterB_outData_setFirstCore =
	     buffer1_serverAdapterB_outDataCore$EMPTY_N ;

  // rule RL_buffer1_serverAdapterB_outData_setFirstEnq
  assign CAN_FIRE_RL_buffer1_serverAdapterB_outData_setFirstEnq =
	     !buffer1_serverAdapterB_outDataCore$EMPTY_N &&
	     buffer1_serverAdapterB_outData_enqData$whas ;
  assign WILL_FIRE_RL_buffer1_serverAdapterB_outData_setFirstEnq =
	     CAN_FIRE_RL_buffer1_serverAdapterB_outData_setFirstEnq ;

  // rule RL_rl_portB_buffer1
  assign CAN_FIRE_RL_rl_portB_buffer1 =
	     (buffer1_serverAdapterB_outDataCore$EMPTY_N ||
	      buffer1_serverAdapterB_outData_enqData$whas) &&
	     buffer1_serverAdapterB_outData_outData$whas ;
  assign WILL_FIRE_RL_rl_portB_buffer1 = CAN_FIRE_RL_rl_portB_buffer1 ;

  // rule RL_buffer1_serverAdapterB_outData_enqOnly
  assign CAN_FIRE_RL_buffer1_serverAdapterB_outData_enqOnly =
	     buffer1_serverAdapterB_outDataCore$FULL_N &&
	     !MUX_rg_data_to_flash$write_1__SEL_1 &&
	     buffer1_serverAdapterB_outData_enqData$whas ;
  assign WILL_FIRE_RL_buffer1_serverAdapterB_outData_enqOnly =
	     CAN_FIRE_RL_buffer1_serverAdapterB_outData_enqOnly ;

  // rule RL_buffer1_serverAdapterB_outData_deqOnly
  assign CAN_FIRE_RL_buffer1_serverAdapterB_outData_deqOnly =
	     buffer1_serverAdapterB_outDataCore$EMPTY_N &&
	     MUX_rg_data_to_flash$write_1__SEL_1 &&
	     !buffer1_serverAdapterB_outData_enqData$whas ;
  assign WILL_FIRE_RL_buffer1_serverAdapterB_outData_deqOnly =
	     CAN_FIRE_RL_buffer1_serverAdapterB_outData_deqOnly ;

  // rule RL_buffer1_serverAdapterB_outData_enqAndDeq
  assign CAN_FIRE_RL_buffer1_serverAdapterB_outData_enqAndDeq =
	     buffer1_serverAdapterB_outDataCore$EMPTY_N &&
	     buffer1_serverAdapterB_outDataCore$FULL_N &&
	     MUX_rg_data_to_flash$write_1__SEL_1 &&
	     buffer1_serverAdapterB_outData_enqData$whas ;
  assign WILL_FIRE_RL_buffer1_serverAdapterB_outData_enqAndDeq =
	     CAN_FIRE_RL_buffer1_serverAdapterB_outData_enqAndDeq ;

  // rule RL_buffer1_serverAdapterB_cnt_finalAdd
  assign CAN_FIRE_RL_buffer1_serverAdapterB_cnt_finalAdd =
	     buffer1_serverAdapterB_cnt_1$whas ||
	     MUX_rg_data_to_flash$write_1__SEL_1 ;
  assign WILL_FIRE_RL_buffer1_serverAdapterB_cnt_finalAdd =
	     CAN_FIRE_RL_buffer1_serverAdapterB_cnt_finalAdd ;

  // rule RL_buffer1_serverAdapterB_s1__dreg_update
  assign CAN_FIRE_RL_buffer1_serverAdapterB_s1__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_buffer1_serverAdapterB_s1__dreg_update = 1'd1 ;

  // inputs to muxes for submodule ports
  assign MUX_buffer0_memory$a_put_1__SEL_1 =
	     WILL_FIRE_RL_rl_read &&
	     IF_wr_address_from_nvm_whas__47_THEN_wr_addres_ETC___d250 &&
	     !buffer_number ;
  assign MUX_buffer0_memory$a_put_1__SEL_2 =
	     WILL_FIRE_RL_rl_write &&
	     IF_wr_address_from_nvm_whas__47_THEN_wr_addres_ETC___d250 &&
	     !buffer_number ;
  assign MUX_buffer1_memory$a_put_1__SEL_1 =
	     WILL_FIRE_RL_rl_read &&
	     IF_wr_address_from_nvm_whas__47_THEN_wr_addres_ETC___d250 &&
	     buffer_number ;
  assign MUX_buffer1_memory$a_put_1__SEL_2 =
	     WILL_FIRE_RL_rl_write &&
	     IF_wr_address_from_nvm_whas__47_THEN_wr_addres_ETC___d250 &&
	     buffer_number ;
  assign MUX_buffer_number$write_1__SEL_1 =
	     WILL_FIRE_RL_rl_write &&
	     IF_wr_address_from_nvm_whas__47_THEN_wr_addres_ETC___d745 ==
	     12'hFF8 ;
  assign MUX_buffer_number$write_1__SEL_2 =
	     WILL_FIRE_RL_rl_command_execution &&
	     (command_register == 8'h30 && rg_read_state == 4'd10 ||
	      command_register == 8'h10 && rg_write_state == 4'd6) ;
  assign MUX_rg_command_execution$write_1__SEL_1 =
	     WILL_FIRE_RL_rl_write &&
	     IF_wr_address_from_nvm_whas__47_THEN_wr_addres_ETC___d745 ==
	     12'hFFA ;
  assign MUX_rg_command_execution$write_1__SEL_2 =
	     WILL_FIRE_RL_rl_command_execution &&
	     (command_register == 8'h0 || command_register == 8'h80) ;
  assign MUX_rg_data_to_flash$write_1__SEL_1 =
	     WILL_FIRE_RL_rl_portB_buffer1 &&
	     (rg_state1 == 4'd1 || rg_state1 == 4'd2) ;
  assign MUX_rg_data_to_flash$write_1__SEL_2 =
	     WILL_FIRE_RL_rl_portB_buffer0 &&
	     (rg_state0 == 4'd1 || rg_state0 == 4'd2) ;
  assign MUX_rg_data_to_flash$write_1__SEL_3 =
	     WILL_FIRE_RL_rl_command_execution &&
	     (command_register == 8'h0 ||
	      command_register_05_EQ_0x30_13_AND_rg_read_sta_ETC___d466) ;
  assign MUX_rg_interrupt$write_1__SEL_1 =
	     WILL_FIRE_RL_rl_command_execution && command_register != 8'h0 &&
	     (command_register == 8'h30 && rg_read_state == 4'd11 ||
	      command_register != 8'h30 && command_register != 8'h80 &&
	      (command_register == 8'h10 && rg_write_state == 4'd10 ||
	       NOT_command_register_05_EQ_0x10_39_58_AND_NOT__ETC___d573)) ;
  assign MUX_buffer_number$write_1__VAL_2 =
	     !buffer_address_16_ULT_0x3FF___d751 &&
	     buffer_address_16_ULT_0x7FF___d752 ;
  assign MUX_rg_data_to_flash$write_1__VAL_1 =
	     (rg_state1 == 4'd1) ?
	       buffer1_serverAdapterB_outData_outData$wget[15:0] :
	       buffer1_serverAdapterB_outData_outData$wget[31:16] ;
  assign MUX_rg_data_to_flash$write_1__VAL_2 =
	     (rg_state0 == 4'd1) ?
	       buffer0_serverAdapterB_outData_outData$wget[15:0] :
	       buffer0_serverAdapterB_outData_outData$wget[31:16] ;
  always@(command_register or
	  x__h13244 or
	  CASE_rg_write_state_x2793_0_x3244_1_x5801__q3 or
	  CASE_rg_read_state_x2793_0_x3244_1_x5801__q4 or
	  CASE_rg_block_erase_state_x2793_0_x3244_1_x5801__q5)
  begin
    case (command_register)
      8'h0, 8'h60, 8'h80: MUX_rg_data_to_flash$write_1__VAL_3 = x__h13244;
      8'h10:
	  MUX_rg_data_to_flash$write_1__VAL_3 =
	      CASE_rg_write_state_x2793_0_x3244_1_x5801__q3;
      8'h30:
	  MUX_rg_data_to_flash$write_1__VAL_3 =
	      CASE_rg_read_state_x2793_0_x3244_1_x5801__q4;
      8'hD0:
	  MUX_rg_data_to_flash$write_1__VAL_3 =
	      CASE_rg_block_erase_state_x2793_0_x3244_1_x5801__q5;
      default: MUX_rg_data_to_flash$write_1__VAL_3 = x__h13244;
    endcase
  end

  // inlined wires
  assign buffer0_serverAdapterA_outData_enqData$whas =
	     WILL_FIRE_RL_buffer0_serverAdapterA_moveToOutFIFO &&
	     buffer0_serverAdapterA_s1[0] ;
  assign buffer0_serverAdapterA_cnt_1$whas =
	     WILL_FIRE_RL_buffer0_serverAdapterA_stageReadResponseAlways &&
	     (!ab__h3039[1] || ab__h3039[0]) ;
  assign buffer0_serverAdapterA_s1_1$wget =
	     { 1'd1, !ab__h3039[1] || ab__h3039[0] } ;
  assign buffer0_serverAdapterB_outData_enqData$whas =
	     WILL_FIRE_RL_buffer0_serverAdapterB_moveToOutFIFO &&
	     buffer0_serverAdapterB_s1[0] ;
  assign buffer0_serverAdapterB_outData_outData$wget =
	     buffer0_serverAdapterB_outDataCore$EMPTY_N ?
	       buffer0_serverAdapterB_outDataCore$D_OUT :
	       buffer0_memory$DOB ;
  assign buffer0_serverAdapterB_outData_outData$whas =
	     buffer0_serverAdapterB_outDataCore$EMPTY_N ||
	     WILL_FIRE_RL_buffer0_serverAdapterB_outData_setFirstEnq ;
  assign buffer0_serverAdapterB_cnt_1$whas =
	     WILL_FIRE_RL_buffer0_serverAdapterB_stageReadResponseAlways &&
	     (!ab__h4438[1] || ab__h4438[0]) ;
  assign buffer0_serverAdapterB_s1_1$wget =
	     { 1'd1, !ab__h4438[1] || ab__h4438[0] } ;
  assign buffer1_serverAdapterA_outData_enqData$whas =
	     WILL_FIRE_RL_buffer1_serverAdapterA_moveToOutFIFO &&
	     buffer1_serverAdapterA_s1[0] ;
  assign buffer1_serverAdapterA_cnt_1$whas =
	     WILL_FIRE_RL_buffer1_serverAdapterA_stageReadResponseAlways &&
	     (!ab__h6002[1] || ab__h6002[0]) ;
  assign buffer1_serverAdapterA_s1_1$wget =
	     { 1'd1, !ab__h6002[1] || ab__h6002[0] } ;
  assign buffer1_serverAdapterB_outData_enqData$whas =
	     WILL_FIRE_RL_buffer1_serverAdapterB_moveToOutFIFO &&
	     buffer1_serverAdapterB_s1[0] ;
  assign buffer1_serverAdapterB_outData_outData$wget =
	     buffer1_serverAdapterB_outDataCore$EMPTY_N ?
	       buffer1_serverAdapterB_outDataCore$D_OUT :
	       buffer1_memory$DOB ;
  assign buffer1_serverAdapterB_outData_outData$whas =
	     buffer1_serverAdapterB_outDataCore$EMPTY_N ||
	     WILL_FIRE_RL_buffer1_serverAdapterB_outData_setFirstEnq ;
  assign buffer1_serverAdapterB_cnt_1$whas =
	     WILL_FIRE_RL_buffer1_serverAdapterB_stageReadResponseAlways &&
	     (!ab__h7401[1] || ab__h7401[0]) ;
  assign buffer1_serverAdapterB_s1_1$wget =
	     { 1'd1, !ab__h7401[1] || ab__h7401[0] } ;

  // register block_address
  always@(IF_wr_address_from_nvm_whas__47_THEN_wr_addres_ETC___d745 or
	  x__h9172 or x__h8737 or x__h8954)
  begin
    case (IF_wr_address_from_nvm_whas__47_THEN_wr_addres_ETC___d745)
      12'hFF4: block_address$D_IN = x__h8737;
      12'hFF5: block_address$D_IN = x__h8954;
      default: block_address$D_IN = x__h9172;
    endcase
  end
  assign block_address$EN =
	     WILL_FIRE_RL_rl_write &&
	     (IF_wr_address_from_nvm_whas__47_THEN_wr_addres_ETC___d745 ==
	      12'hFF4 ||
	      IF_wr_address_from_nvm_whas__47_THEN_wr_addres_ETC___d745 ==
	      12'hFF5 ||
	      IF_wr_address_from_nvm_whas__47_THEN_wr_addres_ETC___d745 ==
	      12'hFF6) ;

  // register buffer0_serverAdapterA_cnt
  assign buffer0_serverAdapterA_cnt$D_IN =
	     buffer0_serverAdapterA_cnt +
	     (buffer0_serverAdapterA_cnt_1$whas ? 3'd1 : 3'd0) +
	     3'd0 ;
  assign buffer0_serverAdapterA_cnt$EN = buffer0_serverAdapterA_cnt_1$whas ;

  // register buffer0_serverAdapterA_s1
  assign buffer0_serverAdapterA_s1$D_IN =
	     { CAN_FIRE_RL_buffer0_serverAdapterA_stageReadResponseAlways &&
	       buffer0_serverAdapterA_s1_1$wget[1],
	       buffer0_serverAdapterA_s1_1$wget[0] } ;
  assign buffer0_serverAdapterA_s1$EN = 1'd1 ;

  // register buffer0_serverAdapterB_cnt
  assign buffer0_serverAdapterB_cnt$D_IN =
	     buffer0_serverAdapterB_cnt_3_PLUS_IF_buffer0_s_ETC___d89 ;
  assign buffer0_serverAdapterB_cnt$EN =
	     CAN_FIRE_RL_buffer0_serverAdapterB_cnt_finalAdd ;

  // register buffer0_serverAdapterB_s1
  assign buffer0_serverAdapterB_s1$D_IN =
	     { CAN_FIRE_RL_buffer0_serverAdapterB_stageReadResponseAlways &&
	       buffer0_serverAdapterB_s1_1$wget[1],
	       buffer0_serverAdapterB_s1_1$wget[0] } ;
  assign buffer0_serverAdapterB_s1$EN = 1'd1 ;

  // register buffer1_serverAdapterA_cnt
  assign buffer1_serverAdapterA_cnt$D_IN =
	     buffer1_serverAdapterA_cnt +
	     (buffer1_serverAdapterA_cnt_1$whas ? 3'd1 : 3'd0) +
	     3'd0 ;
  assign buffer1_serverAdapterA_cnt$EN = buffer1_serverAdapterA_cnt_1$whas ;

  // register buffer1_serverAdapterA_s1
  assign buffer1_serverAdapterA_s1$D_IN =
	     { CAN_FIRE_RL_buffer1_serverAdapterA_stageReadResponseAlways &&
	       buffer1_serverAdapterA_s1_1$wget[1],
	       buffer1_serverAdapterA_s1_1$wget[0] } ;
  assign buffer1_serverAdapterA_s1$EN = 1'd1 ;

  // register buffer1_serverAdapterB_cnt
  assign buffer1_serverAdapterB_cnt$D_IN =
	     buffer1_serverAdapterB_cnt_97_PLUS_IF_buffer1__ETC___d203 ;
  assign buffer1_serverAdapterB_cnt$EN =
	     CAN_FIRE_RL_buffer1_serverAdapterB_cnt_finalAdd ;

  // register buffer1_serverAdapterB_s1
  assign buffer1_serverAdapterB_s1$D_IN =
	     { CAN_FIRE_RL_buffer1_serverAdapterB_stageReadResponseAlways &&
	       buffer1_serverAdapterB_s1_1$wget[1],
	       buffer1_serverAdapterB_s1_1$wget[0] } ;
  assign buffer1_serverAdapterB_s1$EN = 1'd1 ;

  // register buffer_address
  assign buffer_address$D_IN =
	     (command_register == 8'h30) ?
	       ((rg_read_state == 4'd10) ? x__h12629 : 12'd0) :
	       ((rg_write_state == 4'd6) ? x__h12629 : 12'd0) ;
  assign buffer_address$EN =
	     WILL_FIRE_RL_rl_command_execution && command_register != 8'h0 &&
	     (command_register == 8'h30 &&
	      (rg_read_state == 4'd10 || rg_read_state == 4'd11) ||
	      command_register == 8'h10 &&
	      (rg_write_state == 4'd6 || rg_write_state == 4'd9)) ;

  // register buffer_number
  assign buffer_number$D_IN =
	     MUX_buffer_number$write_1__SEL_1 ?
	       x3__h8541[0] :
	       MUX_buffer_number$write_1__VAL_2 ;
  assign buffer_number$EN =
	     WILL_FIRE_RL_rl_write &&
	     IF_wr_address_from_nvm_whas__47_THEN_wr_addres_ETC___d745 ==
	     12'hFF8 ||
	     MUX_buffer_number$write_1__SEL_2 ;

  // register command_register
  assign command_register$D_IN = x3__h8541[7:0] ;
  assign command_register$EN = MUX_rg_command_execution$write_1__SEL_1 ;

  // register id_register0
  assign id_register0$D_IN =
	     IF_wr_data_from_flash_whas__34_THEN_wr_data_fr_ETC___d744[7:0] ;
  assign id_register0$EN =
	     WILL_FIRE_RL_rl_command_execution && command_register == 8'h90 &&
	     rg_read_ID_state == 4'd3 ;

  // register id_register1
  assign id_register1$D_IN =
	     IF_wr_data_from_flash_whas__34_THEN_wr_data_fr_ETC___d744[15:8] ;
  assign id_register1$EN =
	     WILL_FIRE_RL_rl_command_execution && command_register == 8'h90 &&
	     rg_read_ID_state == 4'd3 ;

  // register id_register2
  assign id_register2$D_IN =
	     IF_wr_data_from_flash_whas__34_THEN_wr_data_fr_ETC___d744[7:0] ;
  assign id_register2$EN =
	     WILL_FIRE_RL_rl_command_execution && command_register == 8'h90 &&
	     rg_read_ID_state == 4'd4 ;

  // register id_register3
  assign id_register3$D_IN =
	     IF_wr_data_from_flash_whas__34_THEN_wr_data_fr_ETC___d744[15:8] ;
  assign id_register3$EN =
	     WILL_FIRE_RL_rl_command_execution && command_register == 8'h90 &&
	     rg_read_ID_state == 4'd4 ;

  // register part_type_ECC
  assign part_type_ECC$D_IN = 8'h0 ;
  assign part_type_ECC$EN = 1'b0 ;

  // register rg_block_erase_state
  always@(rg_block_erase_state)
  begin
    case (rg_block_erase_state)
      4'd0: rg_block_erase_state$D_IN = 4'd1;
      4'd1: rg_block_erase_state$D_IN = 4'd2;
      4'd2: rg_block_erase_state$D_IN = 4'd3;
      4'd3: rg_block_erase_state$D_IN = 4'd4;
      4'd4: rg_block_erase_state$D_IN = 4'd5;
      default: rg_block_erase_state$D_IN = 4'd6;
    endcase
  end
  assign rg_block_erase_state$EN =
	     WILL_FIRE_RL_rl_command_execution &&
	     command_register_05_EQ_0xD0_60_AND_rg_block_er_ETC___d661 ;

  // register rg_command_execution
  assign rg_command_execution$D_IN =
	     !MUX_rg_command_execution$write_1__SEL_2 &&
	     !WILL_FIRE_RL_rl_disable ;
  assign rg_command_execution$EN =
	     WILL_FIRE_RL_rl_write &&
	     IF_wr_address_from_nvm_whas__47_THEN_wr_addres_ETC___d745 ==
	     12'hFFA ||
	     WILL_FIRE_RL_rl_command_execution &&
	     (command_register == 8'h0 || command_register == 8'h80) ||
	     WILL_FIRE_RL_rl_disable ;

  // register rg_data_to_flash
  always@(MUX_rg_data_to_flash$write_1__SEL_1 or
	  MUX_rg_data_to_flash$write_1__VAL_1 or
	  MUX_rg_data_to_flash$write_1__SEL_2 or
	  MUX_rg_data_to_flash$write_1__VAL_2 or
	  MUX_rg_data_to_flash$write_1__SEL_3 or
	  MUX_rg_data_to_flash$write_1__VAL_3)
  case (1'b1)
    MUX_rg_data_to_flash$write_1__SEL_1:
	rg_data_to_flash$D_IN = MUX_rg_data_to_flash$write_1__VAL_1;
    MUX_rg_data_to_flash$write_1__SEL_2:
	rg_data_to_flash$D_IN = MUX_rg_data_to_flash$write_1__VAL_2;
    MUX_rg_data_to_flash$write_1__SEL_3:
	rg_data_to_flash$D_IN = MUX_rg_data_to_flash$write_1__VAL_3;
    default: rg_data_to_flash$D_IN =
		 16'b1010101010101010 /* unspecified value */ ;
  endcase
  assign rg_data_to_flash$EN =
	     WILL_FIRE_RL_rl_command_execution &&
	     (command_register == 8'h0 ||
	      command_register_05_EQ_0x30_13_AND_rg_read_sta_ETC___d466) ||
	     WILL_FIRE_RL_rl_portB_buffer0 &&
	     (rg_state0 == 4'd1 || rg_state0 == 4'd2) ||
	     WILL_FIRE_RL_rl_portB_buffer1 &&
	     (rg_state1 == 4'd1 || rg_state1 == 4'd2) ;

  // register rg_data_to_nvm
  always@(IF_wr_address_from_nvm_whas__47_THEN_wr_addres_ETC___d745 or
	  x__h10854 or
	  x__h10074 or
	  x__h10144 or
	  x__h10212 or
	  x__h10280 or
	  x__h10348 or
	  x__h10442 or x__h10536 or x__h10630 or x__h10710 or x__h10814)
  begin
    case (IF_wr_address_from_nvm_whas__47_THEN_wr_addres_ETC___d745)
      12'hFF0: rg_data_to_nvm$D_IN = x__h10074;
      12'hFF1: rg_data_to_nvm$D_IN = x__h10144;
      12'hFF2: rg_data_to_nvm$D_IN = x__h10212;
      12'hFF3: rg_data_to_nvm$D_IN = x__h10280;
      12'hFF4: rg_data_to_nvm$D_IN = x__h10348;
      12'hFF5: rg_data_to_nvm$D_IN = x__h10442;
      12'hFF6: rg_data_to_nvm$D_IN = x__h10536;
      12'hFF7: rg_data_to_nvm$D_IN = x__h10630;
      12'hFF8: rg_data_to_nvm$D_IN = x__h10710;
      12'hFF9: rg_data_to_nvm$D_IN = x__h10814;
      default: rg_data_to_nvm$D_IN = x__h10854;
    endcase
  end
  assign rg_data_to_nvm$EN =
	     WILL_FIRE_RL_rl_read &&
	     (IF_wr_address_from_nvm_whas__47_THEN_wr_addres_ETC___d745 ==
	      12'hFF0 ||
	      IF_wr_address_from_nvm_whas__47_THEN_wr_addres_ETC___d745 ==
	      12'hFF1 ||
	      IF_wr_address_from_nvm_whas__47_THEN_wr_addres_ETC___d745 ==
	      12'hFF2 ||
	      IF_wr_address_from_nvm_whas__47_THEN_wr_addres_ETC___d745 ==
	      12'hFF3 ||
	      IF_wr_address_from_nvm_whas__47_THEN_wr_addres_ETC___d745 ==
	      12'hFF4 ||
	      IF_wr_address_from_nvm_whas__47_THEN_wr_addres_ETC___d745 ==
	      12'hFF5 ||
	      IF_wr_address_from_nvm_whas__47_THEN_wr_addres_ETC___d745 ==
	      12'hFF6 ||
	      IF_wr_address_from_nvm_whas__47_THEN_wr_addres_ETC___d745 ==
	      12'hFF7 ||
	      IF_wr_address_from_nvm_whas__47_THEN_wr_addres_ETC___d745 ==
	      12'hFF8 ||
	      IF_wr_address_from_nvm_whas__47_THEN_wr_addres_ETC___d745 ==
	      12'hFF9 ||
	      IF_wr_address_from_nvm_whas__47_THEN_wr_addres_ETC___d745 ==
	      12'hFFA) ;

  // register rg_interrupt
  assign rg_interrupt$D_IN = MUX_rg_interrupt$write_1__SEL_1 ;
  assign rg_interrupt$EN = MUX_rg_interrupt$write_1__SEL_1 || rg_interrupt ;

  // register rg_nand_buffer_control
  assign rg_nand_buffer_control$D_IN = ~x3__h8541[0] ;
  assign rg_nand_buffer_control$EN = MUX_buffer_number$write_1__SEL_1 ;

  // register rg_onfi_ale
  assign rg_onfi_ale$D_IN =
	     command_register != 8'h0 &&
	     ((command_register == 8'h30) ?
		rg_read_state == 4'd1 :
		((command_register == 8'h10) ?
		   rg_write_state == 4'd1 :
		   command_register == 8'hD0 &&
		   rg_block_erase_state == 4'd1)) ;
  assign rg_onfi_ale$EN =
	     WILL_FIRE_RL_rl_command_execution &&
	     command_register_05_EQ_0x0_12_OR_command_regis_ETC___d401 ;

  // register rg_onfi_ce_l
  assign rg_onfi_ce_l$D_IN = 1'd0 ;
  assign rg_onfi_ce_l$EN =
	     WILL_FIRE_RL_rl_command_execution &&
	     command_register_05_EQ_0x0_12_OR_command_regis_ETC___d401 ;

  // register rg_onfi_cle
  assign rg_onfi_cle$D_IN =
	     command_register == 8'h0 ||
	     ((command_register == 8'h30) ?
		rg_read_state == 4'd0 :
		command_register == 8'h80 ||
		IF_command_register_05_EQ_0x10_39_THEN_rg_writ_ETC___d439) ;
  assign rg_onfi_cle$EN =
	     WILL_FIRE_RL_rl_command_execution &&
	     command_register_05_EQ_0x0_12_OR_command_regis_ETC___d401 ;

  // register rg_onfi_re_l
  assign rg_onfi_re_l$D_IN =
	     command_register != 8'h30 || rg_read_state != 4'd5 ;
  assign rg_onfi_re_l$EN =
	     WILL_FIRE_RL_rl_command_execution &&
	     command_register_05_EQ_0x0_12_OR_command_regis_ETC___d401 ;

  // register rg_onfi_we_l
  assign rg_onfi_we_l$D_IN =
	     command_register != 8'h0 &&
	     ((command_register == 8'h30) ?
		rg_read_state != 4'd0 && rg_read_state != 4'd1 :
		command_register != 8'h80 &&
		((command_register == 8'h10) ?
		   rg_write_state != 4'd0 && rg_write_state != 4'd1 &&
		   rg_write_state != 4'd5 :
		   NOT_command_register_05_EQ_0x60_59_15_AND_IF_c_ETC___d425)) ;
  assign rg_onfi_we_l$EN =
	     WILL_FIRE_RL_rl_command_execution &&
	     command_register_05_EQ_0x0_12_OR_command_regis_ETC___d401 ;

  // register rg_onfi_wp_l
  assign rg_onfi_wp_l$D_IN = 1'b0 ;
  assign rg_onfi_wp_l$EN = 1'b0 ;

  // register rg_read_ID_state
  always@(rg_read_ID_state)
  begin
    case (rg_read_ID_state)
      4'd1: rg_read_ID_state$D_IN = 4'd2;
      4'd2: rg_read_ID_state$D_IN = 4'd3;
      4'd3: rg_read_ID_state$D_IN = 4'd4;
      4'd4: rg_read_ID_state$D_IN = 4'd5;
      default: rg_read_ID_state$D_IN = 4'd6;
    endcase
  end
  assign rg_read_ID_state$EN =
	     WILL_FIRE_RL_rl_command_execution && command_register == 8'h90 &&
	     (rg_read_ID_state == 4'd1 || rg_read_ID_state == 4'd2 ||
	      rg_read_ID_state == 4'd3 ||
	      rg_read_ID_state == 4'd4 ||
	      rg_read_ID_state == 4'd5 ||
	      rg_read_ID_state == 4'd6) ;

  // register rg_read_state
  always@(rg_read_state or
	  buffer_address_16_ULT_0x3FF___d751 or
	  buffer_address_16_ULT_0x7FF___d752)
  begin
    case (rg_read_state)
      4'd0: rg_read_state$D_IN = 4'd1;
      4'd1: rg_read_state$D_IN = 4'd2;
      4'd2: rg_read_state$D_IN = 4'd3;
      4'd3: rg_read_state$D_IN = 4'd4;
      4'd4: rg_read_state$D_IN = 4'd5;
      4'd5: rg_read_state$D_IN = 4'd6;
      4'd6: rg_read_state$D_IN = 4'd7;
      4'd7: rg_read_state$D_IN = 4'd9;
      4'd9: rg_read_state$D_IN = 4'd10;
      4'd10:
	  rg_read_state$D_IN =
	      (buffer_address_16_ULT_0x3FF___d751 ||
	       buffer_address_16_ULT_0x7FF___d752) ?
		4'd9 :
		4'd11;
      default: rg_read_state$D_IN = 4'd12;
    endcase
  end
  assign rg_read_state$EN =
	     WILL_FIRE_RL_rl_command_execution &&
	     command_register_05_EQ_0x30_13_AND_rg_read_sta_ETC___d596 ;

  // register rg_read_status_state
  always@(rg_read_status_state)
  begin
    case (rg_read_status_state)
      4'd1: rg_read_status_state$D_IN = 4'd2;
      4'd2: rg_read_status_state$D_IN = 4'd3;
      4'd3: rg_read_status_state$D_IN = 4'd4;
      default: rg_read_status_state$D_IN = 4'd5;
    endcase
  end
  assign rg_read_status_state$EN =
	     WILL_FIRE_RL_rl_command_execution && command_register == 8'h70 &&
	     (rg_read_status_state == 4'd1 || rg_read_status_state == 4'd2 ||
	      rg_read_status_state == 4'd3 ||
	      rg_read_status_state == 4'd4 ||
	      rg_read_status_state == 4'd5) ;

  // register rg_ready_busy_l
  assign rg_ready_busy_l$D_IN = 1'b0 ;
  assign rg_ready_busy_l$EN = 1'b0 ;

  // register rg_reset_state
  always@(rg_reset_state)
  begin
    case (rg_reset_state)
      4'd1: rg_reset_state$D_IN = 4'd2;
      4'd2: rg_reset_state$D_IN = 4'd3;
      default: rg_reset_state$D_IN = 4'd4;
    endcase
  end
  assign rg_reset_state$EN =
	     WILL_FIRE_RL_rl_command_execution && command_register == 8'hFF &&
	     (rg_reset_state == 4'd1 ||
	      rg_reset_state == 4'd2 && EN_onfi_interface__ready_busy_l_m &&
	      !onfi_interface__ready_busy_l_m__ready_busy_l ||
	      rg_reset_state == 4'd3 &&
	      (!EN_onfi_interface__ready_busy_l_m ||
	       onfi_interface__ready_busy_l_m__ready_busy_l) ||
	      rg_reset_state == 4'd4) ;

  // register rg_state0
  assign rg_state0$D_IN = (rg_state0 == 4'd1) ? 4'd2 : 4'd1 ;
  assign rg_state0$EN = MUX_rg_data_to_flash$write_1__SEL_2 ;

  // register rg_state1
  assign rg_state1$D_IN = (rg_state1 == 4'd1) ? 4'd2 : 4'd1 ;
  assign rg_state1$EN = MUX_rg_data_to_flash$write_1__SEL_1 ;

  // register rg_temp_data_from_flash
  assign rg_temp_data_from_flash$D_IN =
	     IF_wr_data_from_flash_whas__34_THEN_wr_data_fr_ETC___d744 ;
  assign rg_temp_data_from_flash$EN =
	     WILL_FIRE_RL_rl_command_execution && command_register == 8'h30 &&
	     rg_read_state == 4'd9 ;

  // register rg_write_state
  always@(rg_write_state or
	  buffer_address_16_ULT_0x3FF___d751 or
	  buffer_address_16_ULT_0x7FF___d752)
  begin
    case (rg_write_state)
      4'd0: rg_write_state$D_IN = 4'd1;
      4'd1: rg_write_state$D_IN = 4'd2;
      4'd2: rg_write_state$D_IN = 4'd3;
      4'd3: rg_write_state$D_IN = 4'd4;
      4'd4: rg_write_state$D_IN = 4'd5;
      4'd5: rg_write_state$D_IN = 4'd6;
      4'd6:
	  rg_write_state$D_IN =
	      (buffer_address_16_ULT_0x3FF___d751 ||
	       buffer_address_16_ULT_0x7FF___d752) ?
		4'd5 :
		4'd9;
      4'd9: rg_write_state$D_IN = 4'd10;
      default: rg_write_state$D_IN = 4'd11;
    endcase
  end
  assign rg_write_state$EN =
	     WILL_FIRE_RL_rl_command_execution && command_register == 8'h10 &&
	     (rg_write_state == 4'd0 || rg_write_state == 4'd1 ||
	      rg_write_state == 4'd2 ||
	      rg_write_state == 4'd3 ||
	      rg_write_state_40_EQ_4_47_AND_wr_ready_busy_l__ETC___d630) ;

  // register status_register
  assign status_register$D_IN =
	     IF_wr_data_from_flash_whas__34_THEN_wr_data_fr_ETC___d744[7:0] ;
  assign status_register$EN =
	     WILL_FIRE_RL_rl_command_execution && command_register == 8'h70 &&
	     rg_read_status_state == 4'd3 ;

  // submodule buffer0_memory
  assign buffer0_memory$ADDRA =
	     IF_wr_address_from_nvm_whas__47_THEN_wr_addres_ETC___d745[9:0] ;
  assign buffer0_memory$ADDRB = buffer_address[9:0] ;
  assign buffer0_memory$DIA =
	     MUX_buffer0_memory$a_put_1__SEL_1 ?
	       32'hAAAAAAAA /* unspecified value */  :
	       x3__h8541 ;
  assign buffer0_memory$DIB =
	     (command_register == 8'h30) ?
	       x3__h11738 :
	       { IF_wr_data_from_flash_whas__34_THEN_wr_data_fr_ETC___d744,
		 rg_temp_data_from_flash } ;
  assign buffer0_memory$WEA = !MUX_buffer0_memory$a_put_1__SEL_1 ;
  assign buffer0_memory$WEB = command_register == 8'h30 ;
  assign buffer0_memory$ENA =
	     WILL_FIRE_RL_rl_read &&
	     IF_wr_address_from_nvm_whas__47_THEN_wr_addres_ETC___d250 &&
	     !buffer_number ||
	     WILL_FIRE_RL_rl_write &&
	     IF_wr_address_from_nvm_whas__47_THEN_wr_addres_ETC___d250 &&
	     !buffer_number ;
  assign buffer0_memory$ENB =
	     CAN_FIRE_RL_buffer0_serverAdapterB_stageReadResponseAlways ;

  // submodule buffer0_serverAdapterA_outDataCore
  assign buffer0_serverAdapterA_outDataCore$D_IN = buffer0_memory$DOA ;
  assign buffer0_serverAdapterA_outDataCore$ENQ =
	     WILL_FIRE_RL_buffer0_serverAdapterA_outData_enqOnly ;
  assign buffer0_serverAdapterA_outDataCore$DEQ = 1'b0 ;
  assign buffer0_serverAdapterA_outDataCore$CLR = 1'b0 ;

  // submodule buffer0_serverAdapterB_outDataCore
  assign buffer0_serverAdapterB_outDataCore$D_IN = buffer0_memory$DOB ;
  assign buffer0_serverAdapterB_outDataCore$ENQ =
	     WILL_FIRE_RL_buffer0_serverAdapterB_outData_enqAndDeq ||
	     WILL_FIRE_RL_buffer0_serverAdapterB_outData_enqOnly ;
  assign buffer0_serverAdapterB_outDataCore$DEQ =
	     WILL_FIRE_RL_buffer0_serverAdapterB_outData_enqAndDeq ||
	     WILL_FIRE_RL_buffer0_serverAdapterB_outData_deqOnly ;
  assign buffer0_serverAdapterB_outDataCore$CLR = 1'b0 ;

  // submodule buffer1_memory
  assign buffer1_memory$ADDRA =
	     IF_wr_address_from_nvm_whas__47_THEN_wr_addres_ETC___d745[9:0] ;
  assign buffer1_memory$ADDRB = buffer_address[9:0] ;
  assign buffer1_memory$DIA =
	     MUX_buffer1_memory$a_put_1__SEL_1 ?
	       32'hAAAAAAAA /* unspecified value */  :
	       x3__h8541 ;
  assign buffer1_memory$DIB = buffer0_memory$DIB ;
  assign buffer1_memory$WEA = !MUX_buffer1_memory$a_put_1__SEL_1 ;
  assign buffer1_memory$WEB = command_register == 8'h30 ;
  assign buffer1_memory$ENA =
	     WILL_FIRE_RL_rl_read &&
	     IF_wr_address_from_nvm_whas__47_THEN_wr_addres_ETC___d250 &&
	     buffer_number ||
	     WILL_FIRE_RL_rl_write &&
	     IF_wr_address_from_nvm_whas__47_THEN_wr_addres_ETC___d250 &&
	     buffer_number ;
  assign buffer1_memory$ENB =
	     CAN_FIRE_RL_buffer1_serverAdapterB_stageReadResponseAlways ;

  // submodule buffer1_serverAdapterA_outDataCore
  assign buffer1_serverAdapterA_outDataCore$D_IN = buffer1_memory$DOA ;
  assign buffer1_serverAdapterA_outDataCore$ENQ =
	     WILL_FIRE_RL_buffer1_serverAdapterA_outData_enqOnly ;
  assign buffer1_serverAdapterA_outDataCore$DEQ = 1'b0 ;
  assign buffer1_serverAdapterA_outDataCore$CLR = 1'b0 ;

  // submodule buffer1_serverAdapterB_outDataCore
  assign buffer1_serverAdapterB_outDataCore$D_IN = buffer1_memory$DOB ;
  assign buffer1_serverAdapterB_outDataCore$ENQ =
	     WILL_FIRE_RL_buffer1_serverAdapterB_outData_enqAndDeq ||
	     WILL_FIRE_RL_buffer1_serverAdapterB_outData_enqOnly ;
  assign buffer1_serverAdapterB_outDataCore$DEQ =
	     WILL_FIRE_RL_buffer1_serverAdapterB_outData_enqAndDeq ||
	     WILL_FIRE_RL_buffer1_serverAdapterB_outData_deqOnly ;
  assign buffer1_serverAdapterB_outDataCore$CLR = 1'b0 ;

  // remaining internal signals
  assign IF_command_register_05_EQ_0x10_39_THEN_rg_writ_ETC___d439 =
	     (command_register == 8'h10) ?
	       rg_write_state == 4'd0 :
	       command_register == 8'h60 ||
	       CASE_command_register_rg_reset_state_EQ_1_0x70_ETC__q1 ;
  assign IF_wr_address_from_nvm_whas__47_THEN_wr_addres_ETC___d250 =
	     IF_wr_address_from_nvm_whas__47_THEN_wr_addres_ETC___d745 <=
	     12'h7FF ;
  assign IF_wr_address_from_nvm_whas__47_THEN_wr_addres_ETC___d745 =
	     EN_nfcB_interface__address_from_nvm_m ?
	       nfcB_interface__address_from_nvm_m__address_from_nvm :
	       12'd0 ;
  assign IF_wr_data_from_flash_whas__34_THEN_wr_data_fr_ETC___d744 =
	     EN_onfi_interface__data_from_flash_m ?
	       onfi_interface__data_from_flash_m__data_from_flash :
	       16'd0 ;
  assign NOT_command_register_05_EQ_0x10_39_58_AND_NOT__ETC___d573 =
	     command_register != 8'h10 && command_register != 8'h60 &&
	     (command_register == 8'hD0 && rg_block_erase_state == 4'd5 &&
	      (!EN_onfi_interface__ready_busy_l_m ||
	       onfi_interface__ready_busy_l_m__ready_busy_l) ||
	      command_register != 8'hD0 &&
	      command_register_05_EQ_0x70_70_AND_rg_read_sta_ETC___d569) ;
  assign NOT_command_register_05_EQ_0x10_39_58_AND_comm_ETC___d396 =
	     command_register != 8'h10 &&
	     (command_register == 8'h60 ||
	      command_register == 8'hD0 &&
	      (rg_block_erase_state == 4'd0 || rg_block_erase_state == 4'd1 ||
	       rg_block_erase_state == 4'd5 &&
	       (!EN_onfi_interface__ready_busy_l_m ||
		onfi_interface__ready_busy_l_m__ready_busy_l)) ||
	      NOT_command_register_05_EQ_0xD0_60_69_AND_comm_ETC___d393) ;
  assign NOT_command_register_05_EQ_0x60_59_15_AND_IF_c_ETC___d425 =
	     command_register != 8'h60 &&
	     CASE_command_register_NOT_rg_reset_state_EQ_1__ETC__q2 ;
  assign NOT_command_register_05_EQ_0x70_70_76_AND_comm_ETC___d391 =
	     command_register != 8'h70 &&
	     (command_register == 8'h90 &&
	      (rg_read_ID_state == 4'd1 || rg_read_ID_state == 4'd5) ||
	      command_register_05_EQ_0xFF_83_AND_rg_reset_st_ETC___d389) ;
  assign NOT_command_register_05_EQ_0xD0_60_69_AND_comm_ETC___d393 =
	     command_register != 8'hD0 &&
	     (command_register == 8'h70 &&
	      (rg_read_status_state == 4'd1 ||
	       rg_read_status_state == 4'd4) ||
	      NOT_command_register_05_EQ_0x70_70_76_AND_comm_ETC___d391) ;
  assign ab__h3039 = MUX_buffer0_memory$a_put_1__SEL_1 ? 2'd0 : 2'd2 ;
  assign ab__h4438 = (command_register == 8'h30) ? 2'd2 : 2'd0 ;
  assign ab__h6002 = MUX_buffer1_memory$a_put_1__SEL_1 ? 2'd0 : 2'd2 ;
  assign ab__h7401 = ab__h4438 ;
  assign buffer0_serverAdapterB_cnt_3_PLUS_IF_buffer0_s_ETC___d89 =
	     buffer0_serverAdapterB_cnt +
	     (buffer0_serverAdapterB_cnt_1$whas ? 3'd1 : 3'd0) +
	     (MUX_rg_data_to_flash$write_1__SEL_2 ? 3'd7 : 3'd0) ;
  assign buffer1_serverAdapterB_cnt_97_PLUS_IF_buffer1__ETC___d203 =
	     buffer1_serverAdapterB_cnt +
	     (buffer1_serverAdapterB_cnt_1$whas ? 3'd1 : 3'd0) +
	     (MUX_rg_data_to_flash$write_1__SEL_1 ? 3'd7 : 3'd0) ;
  assign buffer_address_16_ULT_0x3FF___d751 = buffer_address < 12'h3FF ;
  assign buffer_address_16_ULT_0x7FF___d752 = buffer_address < 12'h7FF ;
  assign command_register_05_EQ_0x0_12_OR_command_regis_ETC___d401 =
	     command_register == 8'h0 ||
	     command_register == 8'h30 &&
	     (rg_read_state == 4'd0 || rg_read_state == 4'd1 ||
	      rg_read_state != 4'd2 && rg_read_state != 4'd3 &&
	      (rg_read_state == 4'd5 &&
	       (!EN_onfi_interface__ready_busy_l_m ||
		onfi_interface__ready_busy_l_m__ready_busy_l) ||
	       rg_read_state == 4'd11)) ||
	     command_register != 8'h30 &&
	     (command_register == 8'h80 ||
	      command_register_05_EQ_0x10_39_AND_rg_write_st_ETC___d397) ;
  assign command_register_05_EQ_0x10_39_AND_rg_write_st_ETC___d397 =
	     command_register == 8'h10 &&
	     (rg_write_state == 4'd0 || rg_write_state == 4'd1 ||
	      rg_write_state == 4'd5 ||
	      rg_write_state == 4'd10) ||
	     NOT_command_register_05_EQ_0x10_39_58_AND_comm_ETC___d396 ;
  assign command_register_05_EQ_0x10_39_AND_rg_write_st_ETC___d463 =
	     command_register == 8'h10 &&
	     (rg_write_state == 4'd0 || rg_write_state == 4'd1 ||
	      rg_write_state == 4'd2) ||
	     command_register != 8'h10 &&
	     (command_register == 8'h60 ||
	      command_register == 8'hD0 &&
	      (rg_block_erase_state == 4'd0 || rg_block_erase_state == 4'd1 ||
	       rg_block_erase_state == 4'd2) ||
	      command_register != 8'hD0 &&
	      command_register_05_EQ_0x70_70_AND_rg_read_sta_ETC___d458) ;
  assign command_register_05_EQ_0x10_39_AND_rg_write_st_ETC___d647 =
	     command_register == 8'h10 && rg_write_state == 4'd4 &&
	     EN_onfi_interface__ready_busy_l_m &&
	     !onfi_interface__ready_busy_l_m__ready_busy_l ;
  assign command_register_05_EQ_0x30_13_AND_rg_read_sta_ETC___d466 =
	     command_register == 8'h30 &&
	     (rg_read_state == 4'd0 || rg_read_state == 4'd1 ||
	      rg_read_state == 4'd2) ||
	     command_register != 8'h30 &&
	     (command_register == 8'h80 ||
	      command_register_05_EQ_0x10_39_AND_rg_write_st_ETC___d463) ;
  assign command_register_05_EQ_0x30_13_AND_rg_read_sta_ETC___d531 =
	     command_register == 8'h30 && rg_read_state == 4'd10 &&
	     buffer_number ||
	     command_register == 8'h10 &&
	     (rg_write_state == 4'd5 || rg_write_state == 4'd6) &&
	     buffer_number ;
  assign command_register_05_EQ_0x30_13_AND_rg_read_sta_ETC___d551 =
	     command_register == 8'h30 && rg_read_state == 4'd10 &&
	     !buffer_number ||
	     command_register == 8'h10 &&
	     (rg_write_state == 4'd5 || rg_write_state == 4'd6) &&
	     !buffer_number ;
  assign command_register_05_EQ_0x30_13_AND_rg_read_sta_ETC___d596 =
	     command_register == 8'h30 &&
	     (rg_read_state == 4'd0 || rg_read_state == 4'd1 ||
	      rg_read_state == 4'd2 ||
	      rg_read_state == 4'd3 ||
	      rg_read_state == 4'd4 && EN_onfi_interface__ready_busy_l_m &&
	      !onfi_interface__ready_busy_l_m__ready_busy_l ||
	      rg_read_state != 4'd4 &&
	      rg_read_state_14_EQ_5_23_AND_NOT_wr_ready_busy_ETC___d589) ;
  assign command_register_05_EQ_0x70_70_AND_rg_read_sta_ETC___d458 =
	     command_register == 8'h70 && rg_read_status_state == 4'd1 ||
	     command_register == 8'h90 && rg_read_ID_state == 4'd1 ||
	     command_register == 8'hFF && rg_reset_state == 4'd1 ;
  assign command_register_05_EQ_0x70_70_AND_rg_read_sta_ETC___d569 =
	     command_register == 8'h70 && rg_read_status_state == 4'd4 ||
	     command_register == 8'h90 && rg_read_ID_state == 4'd5 ||
	     command_register == 8'hFF && rg_reset_state == 4'd3 &&
	     (!EN_onfi_interface__ready_busy_l_m ||
	      onfi_interface__ready_busy_l_m__ready_busy_l) ;
  assign command_register_05_EQ_0xD0_60_AND_rg_block_er_ETC___d661 =
	     command_register == 8'hD0 &&
	     (rg_block_erase_state == 4'd0 || rg_block_erase_state == 4'd1 ||
	      rg_block_erase_state == 4'd2 ||
	      rg_block_erase_state == 4'd3 ||
	      rg_block_erase_state == 4'd4 &&
	      EN_onfi_interface__ready_busy_l_m &&
	      !onfi_interface__ready_busy_l_m__ready_busy_l ||
	      rg_block_erase_state == 4'd5 &&
	      (!EN_onfi_interface__ready_busy_l_m ||
	       onfi_interface__ready_busy_l_m__ready_busy_l) ||
	      rg_block_erase_state == 4'd6) ;
  assign command_register_05_EQ_0xFF_83_AND_rg_reset_st_ETC___d389 =
	     command_register == 8'hFF &&
	     (rg_reset_state == 4'd1 ||
	      rg_reset_state == 4'd3 &&
	      (!EN_onfi_interface__ready_busy_l_m ||
	       onfi_interface__ready_busy_l_m__ready_busy_l)) ;
  assign rg_read_state_14_EQ_5_23_AND_NOT_wr_ready_busy_ETC___d589 =
	     rg_read_state == 4'd5 &&
	     (!EN_onfi_interface__ready_busy_l_m ||
	      onfi_interface__ready_busy_l_m__ready_busy_l) ||
	     rg_read_state == 4'd6 ||
	     rg_read_state == 4'd7 ||
	     rg_read_state == 4'd9 ||
	     rg_read_state == 4'd10 ||
	     rg_read_state == 4'd11 ||
	     rg_read_state == 4'd12 ;
  assign rg_write_state_40_EQ_4_47_AND_wr_ready_busy_l__ETC___d630 =
	     rg_write_state == 4'd4 && EN_onfi_interface__ready_busy_l_m &&
	     !onfi_interface__ready_busy_l_m__ready_busy_l ||
	     rg_write_state == 4'd5 ||
	     rg_write_state == 4'd6 ||
	     rg_write_state == 4'd9 &&
	     (!EN_onfi_interface__ready_busy_l_m ||
	      onfi_interface__ready_busy_l_m__ready_busy_l) ||
	     rg_write_state == 4'd10 ||
	     rg_write_state == 4'd11 ;
  assign wr_nand_ce_l_whas__29_AND_NOT_wr_nand_ce_l_wge_ETC___d245 =
	     EN_nfcB_interface__nand_ce_l_m &&
	     !nfcB_interface__nand_ce_l_m__nand_ce_l &&
	     EN_nfcB_interface__nand_we_l_m &&
	     !nfcB_interface__nand_we_l_m__nand_we_l &&
	     !rg_command_execution ;
  assign x3__h11738 =
	     { IF_wr_data_from_flash_whas__34_THEN_wr_data_fr_ETC___d744,
	       rg_temp_data_from_flash } ;
  assign x3__h8541 =
	     EN_nfcB_interface__data_from_nvm_m ?
	       nfcB_interface__data_from_nvm_m__data_from_nvm :
	       32'd0 ;
  assign x__h10074 = { 24'd0, id_register0 } ;
  assign x__h10144 = { 24'd0, id_register1 } ;
  assign x__h10212 = { 24'd0, id_register2 } ;
  assign x__h10280 = { 24'd0, id_register3 } ;
  assign x__h10348 = { 24'd0, block_address[7:0] } ;
  assign x__h10442 = { 24'd0, block_address[15:8] } ;
  assign x__h10536 = { 23'd0, block_address[24:16] } ;
  assign x__h10630 = { 24'd0, part_type_ECC } ;
  assign x__h10710 = { 31'd0, buffer_number } ;
  assign x__h10814 = { 24'd0, status_register } ;
  assign x__h10854 = { 24'd0, command_register } ;
  assign x__h12629 = buffer_address + 12'd1 ;
  assign x__h12793 = { 3'd0, block_address[17:5] } ;
  assign x__h13244 = { 8'd0, command_register } ;
  assign x__h15801 = { block_address[4:0], 11'd0 } ;
  assign x__h8737 = { block_address[24:8], x3__h8541[7:0] } ;
  assign x__h8954 =
	     { block_address[24:16], x3__h8541[7:0], block_address[7:0] } ;
  assign x__h9172 = { x3__h8541[8:0], block_address[15:0] } ;
  always@(command_register or
	  rg_reset_state or
	  rg_read_status_state or rg_read_ID_state or rg_block_erase_state)
  begin
    case (command_register)
      8'h70:
	  CASE_command_register_rg_reset_state_EQ_1_0x70_ETC__q1 =
	      rg_read_status_state == 4'd1;
      8'h90:
	  CASE_command_register_rg_reset_state_EQ_1_0x70_ETC__q1 =
	      rg_read_ID_state == 4'd1;
      8'hD0:
	  CASE_command_register_rg_reset_state_EQ_1_0x70_ETC__q1 =
	      rg_block_erase_state == 4'd0;
      default: CASE_command_register_rg_reset_state_EQ_1_0x70_ETC__q1 =
		   rg_reset_state == 4'd1;
    endcase
  end
  always@(command_register or
	  rg_reset_state or
	  rg_read_status_state or rg_read_ID_state or rg_block_erase_state)
  begin
    case (command_register)
      8'h70:
	  CASE_command_register_NOT_rg_reset_state_EQ_1__ETC__q2 =
	      rg_read_status_state != 4'd1;
      8'h90:
	  CASE_command_register_NOT_rg_reset_state_EQ_1__ETC__q2 =
	      rg_read_ID_state != 4'd1;
      8'hD0:
	  CASE_command_register_NOT_rg_reset_state_EQ_1__ETC__q2 =
	      rg_block_erase_state != 4'd0 && rg_block_erase_state != 4'd1;
      default: CASE_command_register_NOT_rg_reset_state_EQ_1__ETC__q2 =
		   rg_reset_state != 4'd1;
    endcase
  end
  always@(rg_write_state or x__h12793 or x__h13244 or x__h15801)
  begin
    case (rg_write_state)
      4'd0: CASE_rg_write_state_x2793_0_x3244_1_x5801__q3 = x__h13244;
      4'd1: CASE_rg_write_state_x2793_0_x3244_1_x5801__q3 = x__h15801;
      default: CASE_rg_write_state_x2793_0_x3244_1_x5801__q3 = x__h12793;
    endcase
  end
  always@(rg_read_state or x__h12793 or x__h13244 or x__h15801)
  begin
    case (rg_read_state)
      4'd0: CASE_rg_read_state_x2793_0_x3244_1_x5801__q4 = x__h13244;
      4'd1: CASE_rg_read_state_x2793_0_x3244_1_x5801__q4 = x__h15801;
      default: CASE_rg_read_state_x2793_0_x3244_1_x5801__q4 = x__h12793;
    endcase
  end
  always@(rg_block_erase_state or x__h12793 or x__h13244 or x__h15801)
  begin
    case (rg_block_erase_state)
      4'd0: CASE_rg_block_erase_state_x2793_0_x3244_1_x5801__q5 = x__h13244;
      4'd1: CASE_rg_block_erase_state_x2793_0_x3244_1_x5801__q5 = x__h15801;
      default: CASE_rg_block_erase_state_x2793_0_x3244_1_x5801__q5 =
		   x__h12793;
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (!RST_N)
      begin
        block_address <= `BSV_ASSIGNMENT_DELAY 25'd0;
	buffer0_serverAdapterA_cnt <= `BSV_ASSIGNMENT_DELAY 3'd0;
	buffer0_serverAdapterA_s1 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	buffer0_serverAdapterB_cnt <= `BSV_ASSIGNMENT_DELAY 3'd0;
	buffer0_serverAdapterB_s1 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	buffer1_serverAdapterA_cnt <= `BSV_ASSIGNMENT_DELAY 3'd0;
	buffer1_serverAdapterA_s1 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	buffer1_serverAdapterB_cnt <= `BSV_ASSIGNMENT_DELAY 3'd0;
	buffer1_serverAdapterB_s1 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	buffer_address <= `BSV_ASSIGNMENT_DELAY 12'd0;
	buffer_number <= `BSV_ASSIGNMENT_DELAY 1'd0;
	command_register <= `BSV_ASSIGNMENT_DELAY 8'd0;
	id_register0 <= `BSV_ASSIGNMENT_DELAY 8'd0;
	id_register1 <= `BSV_ASSIGNMENT_DELAY 8'd0;
	id_register2 <= `BSV_ASSIGNMENT_DELAY 8'd0;
	id_register3 <= `BSV_ASSIGNMENT_DELAY 8'd0;
	part_type_ECC <= `BSV_ASSIGNMENT_DELAY 8'd0;
	rg_block_erase_state <= `BSV_ASSIGNMENT_DELAY 4'd0;
	rg_command_execution <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_data_to_flash <= `BSV_ASSIGNMENT_DELAY 16'd0;
	rg_data_to_nvm <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rg_interrupt <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_nand_buffer_control <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_onfi_ale <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_onfi_ce_l <= `BSV_ASSIGNMENT_DELAY 1'd1;
	rg_onfi_cle <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_onfi_re_l <= `BSV_ASSIGNMENT_DELAY 1'd1;
	rg_onfi_we_l <= `BSV_ASSIGNMENT_DELAY 1'd1;
	rg_onfi_wp_l <= `BSV_ASSIGNMENT_DELAY 1'd1;
	rg_read_ID_state <= `BSV_ASSIGNMENT_DELAY 4'd1;
	rg_read_state <= `BSV_ASSIGNMENT_DELAY 4'd0;
	rg_read_status_state <= `BSV_ASSIGNMENT_DELAY 4'd1;
	rg_ready_busy_l <= `BSV_ASSIGNMENT_DELAY 1'd1;
	rg_reset_state <= `BSV_ASSIGNMENT_DELAY 4'd1;
	rg_state0 <= `BSV_ASSIGNMENT_DELAY 4'd1;
	rg_state1 <= `BSV_ASSIGNMENT_DELAY 4'd1;
	rg_temp_data_from_flash <= `BSV_ASSIGNMENT_DELAY 16'd0;
	rg_write_state <= `BSV_ASSIGNMENT_DELAY 4'd0;
	status_register <= `BSV_ASSIGNMENT_DELAY 8'd0;
      end
    else
      begin
        if (block_address$EN)
	  block_address <= `BSV_ASSIGNMENT_DELAY block_address$D_IN;
	if (buffer0_serverAdapterA_cnt$EN)
	  buffer0_serverAdapterA_cnt <= `BSV_ASSIGNMENT_DELAY
	      buffer0_serverAdapterA_cnt$D_IN;
	if (buffer0_serverAdapterA_s1$EN)
	  buffer0_serverAdapterA_s1 <= `BSV_ASSIGNMENT_DELAY
	      buffer0_serverAdapterA_s1$D_IN;
	if (buffer0_serverAdapterB_cnt$EN)
	  buffer0_serverAdapterB_cnt <= `BSV_ASSIGNMENT_DELAY
	      buffer0_serverAdapterB_cnt$D_IN;
	if (buffer0_serverAdapterB_s1$EN)
	  buffer0_serverAdapterB_s1 <= `BSV_ASSIGNMENT_DELAY
	      buffer0_serverAdapterB_s1$D_IN;
	if (buffer1_serverAdapterA_cnt$EN)
	  buffer1_serverAdapterA_cnt <= `BSV_ASSIGNMENT_DELAY
	      buffer1_serverAdapterA_cnt$D_IN;
	if (buffer1_serverAdapterA_s1$EN)
	  buffer1_serverAdapterA_s1 <= `BSV_ASSIGNMENT_DELAY
	      buffer1_serverAdapterA_s1$D_IN;
	if (buffer1_serverAdapterB_cnt$EN)
	  buffer1_serverAdapterB_cnt <= `BSV_ASSIGNMENT_DELAY
	      buffer1_serverAdapterB_cnt$D_IN;
	if (buffer1_serverAdapterB_s1$EN)
	  buffer1_serverAdapterB_s1 <= `BSV_ASSIGNMENT_DELAY
	      buffer1_serverAdapterB_s1$D_IN;
	if (buffer_address$EN)
	  buffer_address <= `BSV_ASSIGNMENT_DELAY buffer_address$D_IN;
	if (buffer_number$EN)
	  buffer_number <= `BSV_ASSIGNMENT_DELAY buffer_number$D_IN;
	if (command_register$EN)
	  command_register <= `BSV_ASSIGNMENT_DELAY command_register$D_IN;
	if (id_register0$EN)
	  id_register0 <= `BSV_ASSIGNMENT_DELAY id_register0$D_IN;
	if (id_register1$EN)
	  id_register1 <= `BSV_ASSIGNMENT_DELAY id_register1$D_IN;
	if (id_register2$EN)
	  id_register2 <= `BSV_ASSIGNMENT_DELAY id_register2$D_IN;
	if (id_register3$EN)
	  id_register3 <= `BSV_ASSIGNMENT_DELAY id_register3$D_IN;
	if (part_type_ECC$EN)
	  part_type_ECC <= `BSV_ASSIGNMENT_DELAY part_type_ECC$D_IN;
	if (rg_block_erase_state$EN)
	  rg_block_erase_state <= `BSV_ASSIGNMENT_DELAY
	      rg_block_erase_state$D_IN;
	if (rg_command_execution$EN)
	  rg_command_execution <= `BSV_ASSIGNMENT_DELAY
	      rg_command_execution$D_IN;
	if (rg_data_to_flash$EN)
	  rg_data_to_flash <= `BSV_ASSIGNMENT_DELAY rg_data_to_flash$D_IN;
	if (rg_data_to_nvm$EN)
	  rg_data_to_nvm <= `BSV_ASSIGNMENT_DELAY rg_data_to_nvm$D_IN;
	if (rg_interrupt$EN)
	  rg_interrupt <= `BSV_ASSIGNMENT_DELAY rg_interrupt$D_IN;
	if (rg_nand_buffer_control$EN)
	  rg_nand_buffer_control <= `BSV_ASSIGNMENT_DELAY
	      rg_nand_buffer_control$D_IN;
	if (rg_onfi_ale$EN)
	  rg_onfi_ale <= `BSV_ASSIGNMENT_DELAY rg_onfi_ale$D_IN;
	if (rg_onfi_ce_l$EN)
	  rg_onfi_ce_l <= `BSV_ASSIGNMENT_DELAY rg_onfi_ce_l$D_IN;
	if (rg_onfi_cle$EN)
	  rg_onfi_cle <= `BSV_ASSIGNMENT_DELAY rg_onfi_cle$D_IN;
	if (rg_onfi_re_l$EN)
	  rg_onfi_re_l <= `BSV_ASSIGNMENT_DELAY rg_onfi_re_l$D_IN;
	if (rg_onfi_we_l$EN)
	  rg_onfi_we_l <= `BSV_ASSIGNMENT_DELAY rg_onfi_we_l$D_IN;
	if (rg_onfi_wp_l$EN)
	  rg_onfi_wp_l <= `BSV_ASSIGNMENT_DELAY rg_onfi_wp_l$D_IN;
	if (rg_read_ID_state$EN)
	  rg_read_ID_state <= `BSV_ASSIGNMENT_DELAY rg_read_ID_state$D_IN;
	if (rg_read_state$EN)
	  rg_read_state <= `BSV_ASSIGNMENT_DELAY rg_read_state$D_IN;
	if (rg_read_status_state$EN)
	  rg_read_status_state <= `BSV_ASSIGNMENT_DELAY
	      rg_read_status_state$D_IN;
	if (rg_ready_busy_l$EN)
	  rg_ready_busy_l <= `BSV_ASSIGNMENT_DELAY rg_ready_busy_l$D_IN;
	if (rg_reset_state$EN)
	  rg_reset_state <= `BSV_ASSIGNMENT_DELAY rg_reset_state$D_IN;
	if (rg_state0$EN) rg_state0 <= `BSV_ASSIGNMENT_DELAY rg_state0$D_IN;
	if (rg_state1$EN) rg_state1 <= `BSV_ASSIGNMENT_DELAY rg_state1$D_IN;
	if (rg_temp_data_from_flash$EN)
	  rg_temp_data_from_flash <= `BSV_ASSIGNMENT_DELAY
	      rg_temp_data_from_flash$D_IN;
	if (rg_write_state$EN)
	  rg_write_state <= `BSV_ASSIGNMENT_DELAY rg_write_state$D_IN;
	if (status_register$EN)
	  status_register <= `BSV_ASSIGNMENT_DELAY status_register$D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    block_address = 25'h0AAAAAA;
    buffer0_serverAdapterA_cnt = 3'h2;
    buffer0_serverAdapterA_s1 = 2'h2;
    buffer0_serverAdapterB_cnt = 3'h2;
    buffer0_serverAdapterB_s1 = 2'h2;
    buffer1_serverAdapterA_cnt = 3'h2;
    buffer1_serverAdapterA_s1 = 2'h2;
    buffer1_serverAdapterB_cnt = 3'h2;
    buffer1_serverAdapterB_s1 = 2'h2;
    buffer_address = 12'hAAA;
    buffer_number = 1'h0;
    command_register = 8'hAA;
    id_register0 = 8'hAA;
    id_register1 = 8'hAA;
    id_register2 = 8'hAA;
    id_register3 = 8'hAA;
    part_type_ECC = 8'hAA;
    rg_block_erase_state = 4'hA;
    rg_command_execution = 1'h0;
    rg_data_to_flash = 16'hAAAA;
    rg_data_to_nvm = 32'hAAAAAAAA;
    rg_interrupt = 1'h0;
    rg_nand_buffer_control = 1'h0;
    rg_onfi_ale = 1'h0;
    rg_onfi_ce_l = 1'h0;
    rg_onfi_cle = 1'h0;
    rg_onfi_re_l = 1'h0;
    rg_onfi_we_l = 1'h0;
    rg_onfi_wp_l = 1'h0;
    rg_read_ID_state = 4'hA;
    rg_read_state = 4'hA;
    rg_read_status_state = 4'hA;
    rg_ready_busy_l = 1'h0;
    rg_reset_state = 4'hA;
    rg_state0 = 4'hA;
    rg_state1 = 4'hA;
    rg_temp_data_from_flash = 16'hAAAA;
    rg_write_state = 4'hA;
    status_register = 8'hAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N)
      if (WILL_FIRE_RL_rl_disable)
	$display(" NAND FLASH CONTROLLER IN DISABLED STATE ");
    if (RST_N)
      if (WILL_FIRE_RL_rl_write)
	$display(" NAND FLASH CONTROLLER IN WRITE STATE ");
    if (RST_N)
      if (WILL_FIRE_RL_rl_write &&
	  IF_wr_address_from_nvm_whas__47_THEN_wr_addres_ETC___d745 ==
	  12'hFF4)
	$display(" **** NAND **** Block Address Part 1 written ");
    if (RST_N)
      if (WILL_FIRE_RL_rl_write &&
	  IF_wr_address_from_nvm_whas__47_THEN_wr_addres_ETC___d745 ==
	  12'hFF5)
	$display(" **** NAND **** Block Address Part 2 written ");
    if (RST_N)
      if (WILL_FIRE_RL_rl_write &&
	  IF_wr_address_from_nvm_whas__47_THEN_wr_addres_ETC___d745 ==
	  12'hFF6)
	$display(" **** NAND **** Block Address Part 3 written ");
    if (RST_N)
      if (WILL_FIRE_RL_rl_write &&
	  IF_wr_address_from_nvm_whas__47_THEN_wr_addres_ETC___d745 ==
	  12'hFF8)
	$display("**** NAND ****  Buffer Control Changed ");
    if (RST_N)
      if (WILL_FIRE_RL_rl_write &&
	  IF_wr_address_from_nvm_whas__47_THEN_wr_addres_ETC___d745 ==
	  12'hFFA)
	$display(" **** NAND **RL_nand_flash_controller_rl_command_execution**  Obtained the Command to be executed ");
    if (RST_N)
      if (WILL_FIRE_RL_rl_read)
	$display(" NAND FLASH CONTROLLER IN READ STATE ");
    if (RST_N)
      if (WILL_FIRE_RL_rl_read &&
	  IF_wr_address_from_nvm_whas__47_THEN_wr_addres_ETC___d745 ==
	  12'hFF8)
	$display(" **** NAND ****  Requested for Buffer Number Information ");
    if (RST_N)
      if (WILL_FIRE_RL_rl_command_execution)
	$display(" **** NAND **** In COMMAND EXECUTION STAGE ");
    if (RST_N)
      if (WILL_FIRE_RL_rl_command_execution && command_register == 8'h30 &&
	  rg_read_state == 4'd2)
	$display(" **** NAND **** address sent ");
    if (RST_N)
      if (WILL_FIRE_RL_rl_command_execution && command_register == 8'h30 &&
	  rg_read_state == 4'd3)
	$display(" **** NAND **** wait state for ready/busy to get low ");
    if (RST_N)
      if (WILL_FIRE_RL_rl_command_execution && command_register == 8'h30 &&
	  rg_read_state == 4'd4)
	$display(" wr_ready_busy_l = %d ",
		 !EN_onfi_interface__ready_busy_l_m ||
		 onfi_interface__ready_busy_l_m__ready_busy_l);
    if (RST_N)
      if (WILL_FIRE_RL_rl_command_execution && command_register == 8'h30 &&
	  rg_read_state == 4'd4 &&
	  EN_onfi_interface__ready_busy_l_m &&
	  !onfi_interface__ready_busy_l_m__ready_busy_l)
	$display(" **** NAND **** ready/busy got low ");
    if (RST_N)
      if (WILL_FIRE_RL_rl_command_execution && command_register == 8'h30 &&
	  rg_read_state == 4'd5)
	$display(" wr_ready_busy_l = %d ",
		 !EN_onfi_interface__ready_busy_l_m ||
		 onfi_interface__ready_busy_l_m__ready_busy_l);
    if (RST_N)
      if (WILL_FIRE_RL_rl_command_execution && command_register == 8'h30 &&
	  rg_read_state == 4'd5 &&
	  (!EN_onfi_interface__ready_busy_l_m ||
	   onfi_interface__ready_busy_l_m__ready_busy_l))
	$display(" **** NAND **** data output cycle initiated ");
    if (RST_N)
      if (WILL_FIRE_RL_rl_command_execution && command_register == 8'h30 &&
	  rg_read_state == 4'd9)
	$display(" **** NAND **** 16 bit data received from target ");
    if (RST_N)
      if (WILL_FIRE_RL_rl_command_execution && command_register == 8'h30 &&
	  rg_read_state == 4'd10 &&
	  buffer_number)
	$display(" **** NAND **** 32 bit data loaded onto the buffer_1 ");
    if (RST_N)
      if (WILL_FIRE_RL_rl_command_execution && command_register == 8'h30 &&
	  rg_read_state == 4'd10 &&
	  !buffer_number)
	$display(" **** NAND **** 32 bit data loaded onto the buffer_0 ");
    if (RST_N)
      if (WILL_FIRE_RL_rl_command_execution && command_register == 8'h30 &&
	  rg_read_state == 4'd10 &&
	  !buffer_address_16_ULT_0x3FF___d751 &&
	  !buffer_address_16_ULT_0x7FF___d752)
	$display(" **** NAND **** page data received from target ");
    if (RST_N)
      if (WILL_FIRE_RL_rl_command_execution && command_register == 8'h30 &&
	  rg_read_state == 4'd11)
	$display(" **** NAND **** idle state initiated ");
    if (RST_N)
      if (WILL_FIRE_RL_rl_command_execution && command_register == 8'h10 &&
	  rg_write_state == 4'd2)
	$display(" **** NAND **** address sent ");
    if (RST_N)
      if (WILL_FIRE_RL_rl_command_execution && command_register == 8'h10 &&
	  rg_write_state == 4'd3)
	$display(" **** NAND **** wait state for ready/busy to get low ");
    if (RST_N)
      if (WILL_FIRE_RL_rl_command_execution &&
	  command_register_05_EQ_0x10_39_AND_rg_write_st_ETC___d647)
	$display(" **** NAND **** ready/busy got low ");
    if (RST_N)
      if (WILL_FIRE_RL_rl_command_execution &&
	  command_register_05_EQ_0x10_39_AND_rg_write_st_ETC___d647)
	$display(" **** NAND **** data input cycle initiated in next cycle");
    if (RST_N)
      if (WILL_FIRE_RL_rl_command_execution && command_register == 8'h10 &&
	  rg_write_state == 4'd9)
	$display(" **** NAND **** write process is complete ");
    if (RST_N)
      if (WILL_FIRE_RL_rl_command_execution && command_register == 8'h10 &&
	  rg_write_state == 4'd9)
	$display(" **** NAND **** waiting for ready/busy to get high ");
    if (RST_N)
      if (WILL_FIRE_RL_rl_command_execution && command_register != 8'h0 &&
	  command_register != 8'h30 &&
	  command_register != 8'h80 &&
	  command_register != 8'h10 &&
	  command_register != 8'h60 &&
	  command_register != 8'hD0 &&
	  command_register != 8'h70 &&
	  command_register != 8'h90 &&
	  command_register != 8'hFF)
	$display(" default ");
    if (RST_N)
      if (WILL_FIRE_RL_buffer0_serverAdapterA_overRun)
	$display("ERROR: %m: mkBRAMSeverAdapter overrun");
    if (RST_N)
      if (WILL_FIRE_RL_buffer0_serverAdapterB_overRun)
	$display("ERROR: %m: mkBRAMSeverAdapter overrun");
    if (RST_N)
      if (WILL_FIRE_RL_rl_portB_buffer0 && rg_state0 == 4'd1)
	$display(" **** NAND **** 1st 16 bit data sent from buffer0 ");
    if (RST_N)
      if (WILL_FIRE_RL_rl_portB_buffer0 && rg_state0 == 4'd2)
	$display(" **** NAND **** 2nd 16 bit data sent from buffer0 ");
    if (RST_N)
      if (WILL_FIRE_RL_buffer1_serverAdapterA_overRun)
	$display("ERROR: %m: mkBRAMSeverAdapter overrun");
    if (RST_N)
      if (WILL_FIRE_RL_buffer1_serverAdapterB_overRun)
	$display("ERROR: %m: mkBRAMSeverAdapter overrun");
    if (RST_N)
      if (WILL_FIRE_RL_rl_portB_buffer1 && rg_state1 == 4'd1)
	$display(" **** NAND **** 1st 16 bit data sent from buffer1 ");
    if (RST_N)
      if (WILL_FIRE_RL_rl_portB_buffer1 && rg_state1 == 4'd2)
	$display(" **** NAND **** 2nd 16 bit data sent from buffer1 ");
  end
  // synopsys translate_on
endmodule  // mkNandFlashController

